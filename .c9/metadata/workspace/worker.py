{"filter":false,"title":"worker.py","tooltip":"/worker.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":135,"column":40},"end":{"row":135,"column":41},"action":"insert","lines":["."],"id":196}],[{"start":{"row":135,"column":41},"end":{"row":135,"column":42},"action":"insert","lines":["c"],"id":197}],[{"start":{"row":135,"column":42},"end":{"row":135,"column":43},"action":"insert","lines":["o"],"id":198}],[{"start":{"row":135,"column":43},"end":{"row":135,"column":44},"action":"insert","lines":["n"],"id":199}],[{"start":{"row":135,"column":44},"end":{"row":135,"column":45},"action":"insert","lines":["t"],"id":200}],[{"start":{"row":135,"column":45},"end":{"row":135,"column":46},"action":"insert","lines":["e"],"id":201}],[{"start":{"row":135,"column":46},"end":{"row":135,"column":47},"action":"insert","lines":["n"],"id":202}],[{"start":{"row":135,"column":47},"end":{"row":135,"column":48},"action":"insert","lines":["t"],"id":203}],[{"start":{"row":0,"column":0},"end":{"row":793,"column":0},"action":"remove","lines":["#!/usr/bin/env python","#","# Copyright 2007 Google Inc.","#","# Data sources:","# http://www.ehp.qld.gov.au/cgi-bin/air/xml.php?category=1&region=ALL","# http://campodenno.taslab.eu/stazioni/json?id=CMD001","# coding=utf-8","","\"\"\"","NY - 40.714224,-73.961452","SP - -23.560057,-46.634334","GBG - 57.70887,11.97456","BER - 52.536958,13.408041","HTULL -","SOFO - 59.312963,18.080363","Harajuku - 35.671628,139.710285","Wellington - -41.296435,174.776527","Sidney - -33.896549,151.179963","Kitazawa - 35.663365,139.668332","Nairobi - -1.282794,36.828232","Canary Warf, London - 51.501538, -0.015757","","Barrsatra - 60.620428,16.750116","New Holland/Admiralteysky District St Petersburg - 59.929506,30.289360","Data from http://luft.hamburg.de/","24FL - 53.638128,9.996872","70MB - 53.555555,9.943407","17SM - 53.560899,9.957213","68HB - 53.592354,10.053774","61WB -","","EAA","http://fme.discomap.eea.europa.eu/fmedatastreaming/AirQuality/AirQualityUTDExport.fmw?FromDate=2015-03-17&ToDate=2015-03-17&Countrycode=se&InsertedSinceDate=&UpdatedSinceDate=&Pollutant=PM10,SO2,NO2,CO&Namespace=&Format=XML&UserToken=6C2D03D8-04E1-4D07-B856-D92ACE0FA832","\"\"\"","import os","import ast","import logging","import jinja2","import webapp2","import json","import urllib","import urllib2","import base64","from google.appengine.api import taskqueue","from google.appengine.ext import db","from google.appengine.api import urlfetch","from protorpc import messages","from protorpc import message_types","from protorpc import remote","from random import randrange","import datetime","import calendar","import time","import csv","import StringIO","import json","from xml.dom import minidom","from google.appengine.ext import db","import hashlib","","GEOLOCATION_URL = \"https://maps.googleapis.com/maps/api/geocode/json?language=en&key=AIzaSyA1WnmUgVJtsGuWoyHh-U8zlKRcGlSACXU&latlng=%s\"","#SERVICE_URL = \"http://localhost:8888\"","SERVICE_URL = \"https://bamboo-zone-547.appspot.com\"","# http://apis-explorer.appspot.com/apis-explorer/?base=http://localhost:8080/_ah/api#p/","","JINJA_ENVIRONMENT = jinja2.Environment(loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),extensions=['jinja2.ext.autoescape'],autoescape=True)","","","class AirReport(): pass","class HoodReport(): pass","","class Report(db.Model):","    zoneKey = db.StringProperty()","    name = db.StringProperty()","    report = db.TextProperty()","","class Records(db.Model):","    \"\"\"Models an individual Record entry with content and date.\"\"\"","    timestamp = db.DateTimeProperty()","    pm10 = db.FloatProperty()","    co = db.FloatProperty()","    no2 = db.FloatProperty()","    index = db.FloatProperty()","    position = db.GeoPtProperty()","    positionLabels = db.StringProperty()","    sourceId = db.StringProperty()","    zoneKey = db.StringProperty()","","","class UrlTester(webapp2.RequestHandler):","    def get(self):","        urlfetch.set_default_fetch_deadline(60)","        base64string = base64.encodestring('%s:%s' % (\"lars@wattsgard.se\", \"AirUp123\")).replace('\\n', '')","        pl = {","            'password':'AirUp123'","        }","        headers = {","            'Accept':'application/json;charset=UTF-8',","            'Content-Type':'application/json'","        }","        # curl -X POST --header \"Content-Type: application/json\" --header \"Accept: application/json;charset=UTF-8\" -d \"{\\\"password\\\":\\\"AirUp123\\\"}\" \"http://api.foobot.io/v2/user/lars%40wattsgard.se/login/\"","        #urlLogin = 'http://api.foobot.io/v2/user/lars@wattsgard.se/login/'","        urlLogin = 'http://api.foobot.io/v2/user/lars@wattsgard.se/homehost/'","        ","","        print base64string","","        #data = urllib.urlencode(pl)","        #opener = urllib2.build_opener(urllib2.HTTPHandler(debuglevel=1))","        #content = opener.open(urlLogin, data=data).read()","        #content.add_header(\"Content-Type\", \"application/json\")","        #content.add_header(\"Accept\", \"application/json;charset=UTF-8\")","        #content.add_header(\"Authorization\", \"Basic %s\" % base64string)","        ","","","        #","        #response = urlfetch.fetch(url=urlLogin, method = urlfetch.POST, payload=pl, headers = {\"Authorization\": \"Basic %s\" % base64string, \"Accept\": \"application/json;charset=UTF-8\", \"Content-Type\":\"application/json\"})","        response = urlfetch.fetch(method=urlfetch.POST, url=urlLogin, payload=\"{\\\"password\\\":\\\"AirUp123\\\"}\", headers=headers)","","        #request = urllib2.Request(urlLogin, data)","        #request.get_method = lambda: \"POST\"","        #request.add_header(\"Authorization\", \"Basic %s\" % base64string)","        #request.add_header(\"Accept\", \"application/json;charset=UTF-8\")","        #request.add_header(\"Content-Type\", \"application/json\")","        #self.response.write(\"hehe\")","","        #response = urllib2.urlopen(request)","        #token = response.info().getheader('X-AUTH-TOKEN')","        #self.response.write(token)","","        if response.status_code == 200:","            #token = response.headers['X-AUTH-TOKEN']","            #self.response.write(token)","            self.response.write(response.content)","            ","        else:","            self.response.write(response.content)","","","class Foobot(webapp2.RequestHandler):","    def get(self):","        isotoday = datetime.datetime.now().date().isoformat()","        urlLogin = 'https://api.foobot.io/v2/user/lars@wattsgard.se/login/'","        urlDevice = 'https://api.foobot.io/v2/owner/lars@wattsgard.se/device/'","        urlData = 'https://api.foobot.io/v2/device/%s/datapoint/2015-12-22T011:00/2015-12-22T12:00:00/0/'","        urlfetch.set_default_fetch_deadline(60)","        # First. Login and get the token","        #base64string = base64.encodestring('%s:%s' % (\"lars@wattsgard.se\", \"AirUp123\")).replace('\\n', '')","        #response = urlfetch.fetch(url=urlLogin, method = urlfetch.GET, headers = {\"Authorization\": \"Basic %s\" % base64string})","        headers = {","            'Accept':'application/json;charset=UTF-8',","            'Content-Type':'application/json'","        }        ","        response = urlfetch.fetch(method=urlfetch.POST, url=urlLogin, payload=\"{\\\"password\\\":\\\"AirUp123\\\"}\", headers=headers)","        if response.status_code == 200:","            ","            token = response.headers['X-AUTH-TOKEN']","            print \"###TOKEN\"","            print token","            #self.response.write(token)","            # 2 use the token to get all devices","            response = urlfetch.fetch(url=urlDevice, method = urlfetch.GET, headers = {\"X-AUTH-TOKEN\": token})","            print response.content","            devices = json.loads(response.content)","            for dev in devices:","                postdata = {}","                # 3. using each device uuid get all data (within the dates)","                response = urlfetch.fetch(url=urlData % dev['uuid'], method = urlfetch.GET, headers = {\"X-AUTH-TOKEN\": token})","                fooData = response.content","                headers = (\"s\",","                    \"ugm3\",","                    \"C\",","                    \"pc\",","                    \"ppm\",","                    \"ppb\",","                    \"%\")","                j = json.loads(fooData)","                dp = j['datapoints']","","                if dp:","                    latest = dp[0]","                    if latest:","                        postdata = {}","                        time = latest[0]","                        pm = latest[1]","                        postdata['sourceId'] = dev['name']","                        postdata['position'] = \"59.312963,18.080363\"","                        postdata['pm10'] = str(pm)","                        print postdata","                        taskqueue.add(url='/worker', params=postdata)","        else:","            self.response.write(response.status_code)","","        self.response.write(\"<strong>DONE</strong>\")","","","","class Eaa(webapp2.RequestHandler):","","    def get(self):","","        def regData(country):","            isotoday = datetime.datetime.now().date().isoformat()","            url = \"http://fme.discomap.eea.europa.eu/fmedatastreaming/AirQuality/AirQualityUTDExport.fmw?FromDate=\" + isotoday + \"&ToDate=\" + isotoday + \"&Countrycode=\" + country + \"&InsertedSinceDate=&UpdatedSinceDate=&Pollutant=PM10&Namespace=&Format=XML&UserToken=6C2D03D8-04E1-4D07-B856-D92ACE0FA832\"","            response = urllib2.urlopen(url, timeout = 90)","            xmldoc = minidom.parse(response)","            records = xmldoc.getElementsByTagName('record')","            self.response.write(\"<br/><code>\" + url + \" - \" + str(len(records)) + \" <code><br/>\")","","            def getText(nodelist):","                rc = []","                for node in nodelist:","                    if node.nodeType == node.TEXT_NODE:","                        rc.append(node.data)","                return ''.join(rc).encode(\"utf-8\",\"ignore\")","","            for rec in records:","                postdata = {}","                station_code = rec.getElementsByTagName(\"station_code\")[0]","                station_name = rec.getElementsByTagName(\"station_name\")[0]","                pollutant = rec.getElementsByTagName(\"pollutant\")[0]","                samplingpoint_point = rec.getElementsByTagName(\"samplingpoint_point\")[0]","                value_numeric = rec.getElementsByTagName(\"value_numeric\")[0]","                posx = samplingpoint_point.attributes['x'].value","                posy = samplingpoint_point.attributes['y'].value","","                postdata['sourceId'] = \"EAA-\"+getText(station_code.childNodes)","                postdata['position'] = posy + \",\" + posx","                postdata[getText(pollutant.childNodes).lower()] = str(getText(value_numeric.childNodes))","                postdata['co'] = \"0.3\"","                postdata['no2'] = \"0.4\"","                self.response.write(postdata)","                #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","                #req.add_header('Content-Type', 'application/json')","                #response = urllib2.urlopen(req, json.dumps(postdata))","                taskqueue.add(url='/worker', params=postdata)","","","        country = self.request.get('country')","        regData(country)","        self.response.write(\"<br/><code>EAA DONE<code><br/>\")","","","","class Hamburg1(webapp2.RequestHandler):","","    def get(self):","        #print \"HBG\"","","        def regData(url, sourceId, position):","            response = urllib2.urlopen(url)","            cr = csv.reader(response)","            postdata = {","                'sourceId': '',","                'position': '',","                'pm10': '',","                'co': '',","                'no2': ''","            }","            rlista = list(cr)[5]","            co = rlista[1]","","            try:","                co = rlista[1]","                postdata['co'] = str(((float(co))*24.4500)/28.0100) #Convert mg/m3 to ppm","            except Exception, e:","                print \"No co\"","","            try:","                no2 = rlista[3]","                postdata['no2'] = str(((float(no2)/1000.0000)*24.4500)/46.0100) #Convert mg/m3 to ppm","            except Exception, e:","                print \"No no2\"","","            postdata.sourceId = sourceId","            postdata.position = position","","            #req = urllib2.Request('https://bamboo-zone-547.appspot.com/_ah/api/airup/v1/queueIt')","            #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","            #req.add_header('Content-Type', 'application/json')","            #response = urllib2.urlopen(req, json.dumps(postdata))","","            self.response.write(\"<br/><code>DONE \" + sourceId + \"<code><br/>\")","            taskqueue.add(url='/worker', params=postdata)","","","        \"\"\"","        Data from http://luft.hamburg.de/","        24FL - 53.638128,9.996872","        70MB - 53.555555,9.943407","        17SM - 53.560899,9.957213","        68HB - 53.592354,10.053774","        61WB - 53.508315,9.990633","        \"\"\"","                #http://hamburg.luftmessnetz.de/station/24FL.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday&searchfrom=02.01.2016+00%3A00&searchuntil=03.01.2016+00%3A00","        regData(\"http://hamburg.luftmessnetz.de/station/70MB.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-70MB\", \"53.555555,9.943407\")","        regData(\"http://hamburg.luftmessnetz.de/station/17SM.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-17SM\", \"53.560899,9.957213\")","        regData(\"http://hamburg.luftmessnetz.de/station/68HB.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-68HB\", \"53.592354,10.053774\")","        regData(\"http://hamburg.luftmessnetz.de/station/24FL.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-24FL\", \"53.638128,9.996872\")","        regData(\"http://hamburg.luftmessnetz.de/station/61WB.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-61WB\", \"53.508315,9.990633\")","","","class Goteborg(webapp2.RequestHandler):","","    def get(self):","        url = \"http://data.goteborg.se/AirQualityService/v1.0/LatestMeasurement/4abad3dd-5d24-4c9c-9d17-79a946abe6c2?format=json\"","        response = urllib2.urlopen(url);","        data = json.loads(response.read())","","        postdata = {","            'sourceId': 'GBG1',","            'position': '57.708870,11.974560',","            'pm10': '',","            'co': '',","            'no2': ''","        }","        try:","        \tpm10 = data['AirQuality']['PM10']['Value']","        \tpostdata.pm10 = str(pm10)","        except Exception, e:","        \tprint \"no pm10\"","        \t#postdata['pm10'] = 0","","        try:","        \tno2 = data['AirQuality']['NO2']['Value']","        \tpostdata.no2 = str(((no2/1000.0000)*24.4500)/46.0100) #Convert mg/m3 to ppm","        except Exception, e:","        \tprint \"No no2\"","        \t#postdata['no2'] = 0","","        try:","        \tco = data['AirQuality']['CO']['Value']","        \tpostdata.co = str(((co/1000.0000)*24.4500)/28.0100) #Convert mg/m3 to ppm","        except Exception, e:","        \tprint \"No co\"","        \t#postdata['co'] = 0","","","        taskqueue.add(url='/worker', params=postdata)","","        #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","        #req.add_header('Content-Type', 'application/json')","        #response = urllib2.urlopen(req, json.dumps(postdata))","        self.response.write(postdata)","","","","class SubmitToQueue(webapp2.RequestHandler):","","    def post(self):","","        postdata = {}","","        try:","            pm10=self.request.get('pm10')","            postdata['pm10'] = str(pm10)","        except Exception, e:","            print \"no pm10\"","","        try:","            no2=self.request.get('no2')","            postdata['no2'] = str(no2)","        except Exception, e:","            print \"No no2\"","","        try:","            co=self.request.get('co')","            postdata['co'] = str(co)","        except Exception, e:","            print \"No co\"","","        try:","            sourceId=self.request.get('sourceId')","            postdata['sourceId'] = sourceId","        except Exception, e:","            print \"No sourceId\"","","        try:","            lat=self.request.get('lat')","            lon=self.request.get('lon')","            postdata['position'] = lat + ',' + lon","        except Exception, e:","            print \"No position\"","","","        self.response.write(postdata)","","        #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","        #req.add_header('Content-Type', 'application/json')","        #response = urllib2.urlopen(req, json.dumps(postdata))","        taskqueue.add(url='/worker', params=postdata)","","","","class Umea(webapp2.RequestHandler):","    def get(self):","        #print \"#### UMEA ####\"","    \t#logging.info(\"UMEA\")","    \turl = \"http://ckan.openumea.se/api/action/datastore_search?resource_id=27fb8bcc-23cb-4e85-b5b4-fde68a8ef93a&limit=1&sort=M%C3%A4ttidpunkt%20desc\"","        try:","            response = urllib2.urlopen(url);","            data = json.loads(response.read())","        except Exception, e:","            print \"Error\"","","    \t#postdata = {}","    \ttry:","    \t\tpm10 = data['result']['records'][0]['PM10']","    \t\t#postdata['pm10'] = str(float(pm10))","    \texcept Exception, e:","    \t\tpm10 = 0","","        pm10str = str(float(pm10))","","    \ttry:","    \t\tno2 = data['result']['records'][0]['NO2']","    \t\t#postdata['no2'] = str(((no2/1000.0000)*24.4500)/46.0100) #Convert mg/m3 to ppm","    \texcept Exception, e:","    \t\tno2 = 0","","        no2str = str(((no2/1000.0000)*24.4500)/46.0100)","","        payload = {","            'sourceId': 'UMEA1',","            'position': '63.827743,20.256825',","            'pm10': pm10str,","            'no2': no2str","        }","","        #postdata['sourceId'] = 'UMEA1'","        #postdata['position'] = '63.827743,20.256825'","        taskqueue.add(url='/worker', params=payload)","        #taskqueue.add(url=\"/worker\",params={postdata})","","    \t#req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","    \t#req.add_header('Content-Type', 'application/json')","    \t#response = urllib2.urlopen(req, json.dumps(postdata))","    \tself.response.write(payload)","","class Sthlm(webapp2.RequestHandler):","\tdef get(self):","\t\turl = \"http://slb.nu/cgi-bin/airweb.gifgraphic.cgi?format=txt&zmacro=lvf/air/timdatabas//lvf-kvavedioxd_flera.ic&from=130507&to=130508&path=/usr/airviro/data/sthlm/&lang=swe&rsrc=Halter.4.MainPage&st=lvf&regionPath=\"","\t\tresponse = urllib2.urlopen(url);","\t\tcr = csv.reader(response)","\t\tfor row in cr:","\t\t\tprint \"z\".join(row)","\t\t\t#for col in row:","\t\t\t\t#if col[:1] <> \"#\":","\t\t\t\t\t#print col","","","tableAqiIndex = [ range(0, 50, 1),range(51, 100, 1),range(101, 150, 1),range(151, 200, 1),range(201, 300, 1),range(301, 400, 1),range(401, 500, 1) ]","tableCo = [ range(0, 44, 1),range(45, 94, 1),range(95, 124, 1),range(125, 154, 1),range(155, 304, 1),range(305, 404, 1),range(405, 504, 1) ]","tableNo2 = [ range(0, 53, 1),range(54, 100, 1),range(101, 360, 1),range(361, 640, 1),range(650, 1240, 1),range(1250, 1640, 1),range(1650, 2040, 1) ]","tablePm10 = [ range(0, 54, 1),range(55, 154, 1),range(155, 254, 1),range(255, 354, 1),range(355, 424, 1),range(425, 504, 1),range(505, 604, 1) ]","indexLables = [\"Good\",\"Moderate\",\"Unhealthy for Sensitive Group\",\"Unhealthy\",\"Very Unhealthy\",\"Hazardous\",\"Hazardous\"]","","","def index(table, v, fac):","","    try:","        row = [i for i,l in enumerate(table) if int(v*fac) in l][0]","        bpLow = float(table[row][0])/fac","        bpHigh = (float(table[row][len(table[row])-1]+1)/fac)","        iLow = tableAqiIndex[row][0]","        iHigh = tableAqiIndex[row][len(tableAqiIndex[row])-1]+1","        index = (","            (float(iHigh) - float(iLow)) /","            (float(bpHigh) - float(bpLow))","            ) * (float(v)-(float(bpLow))) + float(iLow)","        return int(index)","    except Exception, e:","        print e","        return 0","","def aqi(values):","","    co=values[\"co\"]","    pm10=values[\"pm10\"]","    no2=values[\"no2\"]","","    #print \"%%%% AQI %%%%\"","    #print values","    #print \"ISDIG\"","    #print pm10","","    f = 0","    coIndex = 0","    pm10Index = 0","    no2Index = 0","","    if co.replace('.','',1).isdigit():","        coIndex = index(tableCo, float(co), 10)","        f = f+1","","    if pm10.replace('.','',1).isdigit():","    \tpm10Index = index(tablePm10, float(pm10), 1)","    \tf = f+1","","    # TODO: Check the factor","    if no2.replace('.','',1).isdigit():","    \tno2Index = index(tableNo2, float(no2), 1)","    \tf = f+1","","    if f > 0:","        return float((coIndex+pm10Index+no2Index)/f)","","","","class cache(object):","    def __init__(self, fun):","        #print \"init cache\"","        self.fun = fun","        self.cache = {}","","    def __call__(self, *args, **kwargs):","        key  = str(args) + str(kwargs)","        #print \"call cache\"","","        try:","            #print \"return cache \" + key","            return self.cache[key]","        except KeyError:","            self.cache[key] = rval = self.fun(*args, **kwargs)","            return rval","        except TypeError: # incase key isn't a valid key - don't cache","            return self.fun(*args, **kwargs)","","@cache","def get_geolocation_url_src(url):","    return urllib2.urlopen(url).read()","","def getGeoValue(latlng, keys, valueType):","","    url=GEOLOCATION_URL % latlng","    data = json.loads(get_geolocation_url_src(url))","","    def getGeoValueForAddress(res):","        for key1 in keys:","            for ac in res[\"address_components\"]:","                if key1 in ac[\"types\"]:","                    return ac[valueType]","        return None","    for key in keys:","        for res in data[\"results\"]:","            if key in res[\"types\"]:","                returnVal = getGeoValueForAddress(res)","                return returnVal","    return None","","def getGeoFormattedAddress(latlng, keys):","    url=GEOLOCATION_URL % latlng","    data = json.loads(get_geolocation_url_src(url))","","    for key in keys:","        for res in data[\"results\"]:","            if key in res[\"types\"]:","                return res[\"formatted_address\"]","    return None","","def getGeoPosition(latlng, keys):","    url=GEOLOCATION_URL % latlng","    data = json.loads(get_geolocation_url_src(url))","","    for key in keys:","        for res in data[\"results\"]:","            if key in res[\"types\"]:","                return str(res[\"geometry\"][\"location\"][\"lat\"]) + \",\" + str(res[\"geometry\"][\"location\"][\"lng\"])","    return None","","","def getLocationContext(latlng):","    context = {}","    keyList = [\"neighborhood\",\"sublocality_level_2\",\"sublocality_level_1\",\"administrative_area_level_3\",\"colloquial_area\",\"postal_code\"]","    addrString = getGeoFormattedAddress(latlng, keyList).encode(\"utf-8\")","    hoodPosition = getGeoPosition(latlng, keyList)","    addrList = addrString.split(\", \")","    zoneTitle = addrList[0].decode(\"utf-8\",\"ignore\")","    addrList.remove(addrList[0])","    addrList.remove(addrList[-1])","    zoneSubTitle = \", \".join(addrList).decode(\"utf-8\")","","    country = getGeoValue(latlng, [\"country\"], \"short_name\")","","    context[\"zoneTitle\"] = zoneTitle","    context[\"zoneSubTitle\"] = zoneSubTitle","    context[\"country\"] = country","    context[\"zoneKey\"] = generateZoneKey(zoneTitle,zoneSubTitle,country)","    context[\"position\"] = hoodPosition","    return context","","def generateZoneKey(zoneTitle,zoneSubTitle,country):","    zoneKeyInputString = zoneTitle + zoneSubTitle + country","    zoneKey = hashlib.md5(zoneKeyInputString.encode('ascii', 'ignore').decode('ascii')).hexdigest()","    return zoneKey","","def test():","    robj = {}","    robj[\"country\"] = \"Sweden\"","    return robj","","\"\"\"","Stores the actual measurement data from the different sources.","TODO:","    1. Should store the position labels.","    2. Should not have to store the indexLabel. A dictionary will be included in the ZoneMessage.","\"\"\"","class RegisterRecord(webapp2.RequestHandler):","","","    def post(self): # should run at most 1/s","        # print \"#1. Worker is registering \"","        # Only needs timestamp, pm10, co, no2, position and sourceId as input.","        # The rest should be calculated here.","","        pm10=self.request.get('pm10')","        co=self.request.get('co')","        no2=self.request.get('no2')","","        #print \"PM10: \" + pm10","        #print \"CO: \" + co","        #print \"NO2: \" + no2","","        aqiValue=aqi({\"co\":co,\"pm10\":pm10,\"no2\":no2})","","        if aqiValue is None:","            print \"No AQI\"","        else:","            if not co.replace('.','',1).isdigit():","                co = None","            else:","                co = float(co)","","            if not pm10.replace('.','',1).isdigit():","                pm10 = None","            else:","                pm10 = float(pm10)","","            if not no2.replace('.','',1).isdigit() is None:","                no2 = None","            else:","                no2 = float(no2)","","            latlng = self.request.get('position')","","            locationContext = getLocationContext(latlng)","            zoneKey = locationContext.get('zoneKey')","            zoneTitle = locationContext.get('zoneTitle')","            zoneSubTitle = locationContext.get('zoneSubTitle')","            country = locationContext.get('country')","            position = locationContext.get('position')","","            #print calendar.timegm(time.gmtime())","            #print self.request.get('timestamp')","","            timestamp = self.request.get('timestamp')","            if not timestamp:","                timestamp = calendar.timegm(time.gmtime())","","            rec=Records(","                timestamp=datetime.datetime.fromtimestamp(float(timestamp)),","                pm10=pm10,","                co=co,","                no2=no2,","                zoneKey=zoneKey,","                # The index should be calculated here","                #index=self.request.get('index'),","                index=aqiValue,","                # TODO: Do a lookup to google","                position=self.request.get('position'),","                positionLabels=zoneTitle,","                sourceId=self.request.get('sourceId'),","            )","","            rec.put()","","            \"\"\"","            Now, generate the report...","            1. Hitta ytterligare poster i samma zone","            2. Rakna ut medeltal for index och de olika gaserna.","            3. Kolla om det finns en rapport sedan tidigare.","            4. spara historiska data","            5. Berakna min24hr och max 24hr","            \"\"\"","","            \"\"\" Get the data newer than 1 hour \"\"\"","            #res = db.GqlQuery(\"SELECT * FROM Records WHERE zoneKey='\" + zoneKey + \"' AND timestamp >= :1\", datetime.datetime.now() - datetime.timedelta(hours = 6))","            res = db.GqlQuery(\"SELECT * FROM Records WHERE zoneKey='\" + zoneKey + \"'\")","","","            \"\"\" Create a list of all stations and history values \"\"\"","            avrIndex = 0","            stationsDict = {}","            historyDict = {}","            indexArr = []","            for r in res:","                historyDate = r.timestamp.strftime('%Y-%m-%d')","                indexArr = historyDict.get(historyDate, [0.0])","                indexArr.append(r.index)","                historyDict[historyDate] = indexArr","                avrIndex = avrIndex + r.index","                stationsDict[r.sourceId] = str(r.position)","","            stations = []","            for key, value in stationsDict.iteritems():","                temp = {}","                temp[\"sourceId\"] = key","                temp[\"position\"] = value","","                stations.append(temp)","","            \"\"\" Add a proper locale. For now all languages are english \"\"\"","            class Location(): pass","            location = Location()","            location.country=country.upper()","            location.language=\"en\"","","","            \"\"\" Create a array of history records. Each record contains the date and the index for that date.  \"\"\"","            historyArr = []","            class HistoricDate():","                def __init__(self, dict):","                    self.__dict__ = dict","","            for key, value in historyDict.iteritems():","                historyArr.append(HistoricDate({'date' : key, 'index':reduce(lambda x, y: x + y, value) / (len(value)-1)}))","","            \"\"\" Create the zone-detail object that will be persisted as a report for use in the zones API \"\"\"","            class ZoneDetail():","                def to_JSON(self):","                    return json.dumps(self, default=lambda o: o.__dict__, sort_keys=True)","","            zd = ZoneDetail()","            zd.zoneKey=zoneKey","            zd.title=zoneTitle","            zd.subtitle=zoneSubTitle","            zd.stations=stations","            zd.numberOfMeasurements=str(res.count())","            if res.count() > 0:","                zd.index=avrIndex/res.count()","            else:","                zd.index=float(r[0].index)","            zd.co=co","            zd.no2=no2","            zd.pm10=pm10","            zd.location=location","            zd.position=position","            zd.history=historyArr","            zd.min24Hr=1.0","            zd.max24Hr=1.0","","            rec = Report(","                name=zoneTitle + \" \" + zoneSubTitle,","                key_name=zoneKey,","                zoneKey=zoneKey,","                report=zd.to_JSON()","            )","","            rec.put()","","            myKey = db.Key.from_path('Report', zoneKey)","            rec = db.get(myKey)","            rec.report = zd.to_JSON()","            rec.put()","","","","","","","class Index(webapp2.RequestHandler):","    def get(self):","\t\ttemplate_values = {","\t\t\t'greetings': 'zxc',","\t\t}","\t\ttemplate = JINJA_ENVIRONMENT.get_template('index.html')","\t\tself.response.write(template.render(template_values))","","","app = webapp2.WSGIApplication([","        ('/worker', RegisterRecord),","        ('/tester', UrlTester),","        ('/gbg1', Goteborg),","        ('/umea1', Umea),","        ('/hamburg1', Hamburg1),","        ('/sthlm', Sthlm),","        ('/eaa',Eaa),","        ('/foobot',Foobot),","        ('/submitToQueue',SubmitToQueue),","        ('/index.html', Index)","    ], debug=True)",""],"id":204},{"start":{"row":0,"column":0},"end":{"row":814,"column":0},"action":"insert","lines":["#!/usr/bin/env python","#","# Copyright 2007 Google Inc.","#","# Data sources:","# http://www.ehp.qld.gov.au/cgi-bin/air/xml.php?category=1&region=ALL","# http://campodenno.taslab.eu/stazioni/json?id=CMD001","# coding=utf-8","","\"\"\"","NY - 40.714224,-73.961452","SP - -23.560057,-46.634334","GBG - 57.70887,11.97456","BER - 52.536958,13.408041","HTULL -","SOFO - 59.312963,18.080363","Harajuku - 35.671628,139.710285","Wellington - -41.296435,174.776527","Sidney - -33.896549,151.179963","Kitazawa - 35.663365,139.668332","Nairobi - -1.282794,36.828232","Canary Warf, London - 51.501538, -0.015757","","Barrsatra - 60.620428,16.750116","New Holland/Admiralteysky District St Petersburg - 59.929506,30.289360","Data from http://luft.hamburg.de/","24FL - 53.638128,9.996872","70MB - 53.555555,9.943407","17SM - 53.560899,9.957213","68HB - 53.592354,10.053774","61WB -","","EAA","http://fme.discomap.eea.europa.eu/fmedatastreaming/AirQuality/AirQualityUTDExport.fmw?FromDate=2015-03-17&ToDate=2015-03-17&Countrycode=se&InsertedSinceDate=&UpdatedSinceDate=&Pollutant=PM10,SO2,NO2,CO&Namespace=&Format=XML&UserToken=6C2D03D8-04E1-4D07-B856-D92ACE0FA832","\"\"\"","import os","import ast","import logging","import jinja2","import webapp2","import json","import urllib","import urllib2","import base64","from google.appengine.api import taskqueue","from google.appengine.ext import db","from google.appengine.api import urlfetch","from protorpc import messages","from protorpc import message_types","from protorpc import remote","from random import randrange","import datetime","import calendar","import time","import csv","import StringIO","import json","from xml.dom import minidom","from google.appengine.ext import db","import hashlib","import yaml","#import requests","","GEOLOCATION_URL = \"https://maps.googleapis.com/maps/api/geocode/json?language=en&key=AIzaSyA1WnmUgVJtsGuWoyHh-U8zlKRcGlSACXU&latlng=%s\"","# http://apis-explorer.appspot.com/apis-explorer/?base=http://localhost:8080/_ah/api#p/","","JINJA_ENVIRONMENT = jinja2.Environment(loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),extensions=['jinja2.ext.autoescape'],autoescape=True)","FOOBOT_LOCATIONS = {","    \"flintbacken10\": \"59.310014,18.050748\",","    \"Bondegatan21-Ugnen\": \"59.312963,18.080363\",","    \"HappyWattBot05Bergsunds Strand\": \"59.316569,18.026894\",","    \"Peringskioldsvagen58\": \"59.35111,17.90213\",","}","","","class AirReport(): pass","class HoodReport(): pass","","class Report(db.Model):","    zoneKey = db.StringProperty()","    name = db.StringProperty()","    report = db.TextProperty()","","class Records(db.Model):","    \"\"\"Models an individual Record entry with content and date.\"\"\"","    timestamp = db.DateTimeProperty()","    pm10 = db.FloatProperty()","    pm25 = db.FloatProperty()","    o3 = db.FloatProperty()","    co = db.FloatProperty()","    no2 = db.FloatProperty()","    index = db.FloatProperty()","    position = db.GeoPtProperty()","    positionLabels = db.StringProperty()","    sourceId = db.StringProperty()","    zoneKey = db.StringProperty()","","","","class Bot(webapp2.RequestHandler):","    def get(self):","        postdata = {}","        postdata['sourceId'] = \"BotFargfabriken\"","        postdata['position'] = \"59.31472280000001,18.02025470000001\"","        postdata['pm10'] = '22' # Should be a bit random","        taskqueue.add(url='/worker', params=postdata)","        self.response.write(postdata)","","","class Linkoping(webapp2.RequestHandler):","    def get(self):","        isotoday = datetime.datetime.now().date().isoformat()","        url = \"http://nods.se/rest/air/municipalities/0580?from=\" + isotoday + \"&minified=true\"","        headers = {'Accept':'application/json;charset=UTF-8','Content-Type':'application/json'}","        result = urlfetch.fetch(","            url,","            headers=headers,","            method='GET'","        )","","        data = json.loads(result.content)","        dataLatest = data['airMeasurements'][0]","        postdata = {}","        time = dataLatest[\"time\"]","        pm = dataLatest[\"value\"]","        postdata['sourceId'] = \"Linkoping-hamngatan-nods\"","        postdata['position'] = \"58.408413,15.631572\"","        postdata['pm10'] = str(pm)","        taskqueue.add(url='/worker', params=postdata)","        self.response.write(postdata)","","","","class Foobot(webapp2.RequestHandler):","    def get(self):","        isotoday = datetime.datetime.now().date().isoformat()","        print isotoday","        #urlLogin = 'https://api.foobot.io/v2/user/lars@wattsgard.se/login/'","        urlLogin = 'http://api-eu-west-1.foobot.io/v2/user/lars%40wattsgard.se/login/'","","        urlDevice = 'https://api-eu-west-1.foobot.io/v2/owner/lars%40wattsgard.se/device/'","        urlData = 'https://api-eu-west-1.foobot.io/v2/device/%s/datapoint/'+ isotoday + 'T00:00/' + isotoday + 'T23:59:00/0/'","        urlfetch.set_default_fetch_deadline(60)","        # First. Login and get the token","        base64string = base64.encodestring('%s:%s' % (\"lars@wattsgard.se\", \"AirUp123\")).replace('\\n', '')","        headers = {'Accept':'application/json;charset=UTF-8','Content-Type':'application/json'}","","        payload=\"{\\\"password\\\":\\\"AirUp123\\\"}\"","        resLogin = urlfetch.fetch(","            urlLogin,","            headers=headers,","            method='POST',","            payload=payload","        )","","        if resLogin.status_code == 200:","            token = resLogin.headers['X-AUTH-TOKEN']","            # 2 use the token to get all devices","            headers = {'Accept':'application/json;charset=UTF-8','Content-Type':'application/json','X-AUTH-TOKEN': token}","            responseDev = urlfetch.fetch(","                urlDevice,","                method='GET',","                headers = headers","            )","            devices = json.loads(responseDev.content)","            for dev in devices:","                postdata = {}","                # 3. using each device uuid get all data (within the dates)","                #self.response.write(dev)","                #print dev['uuid']","                responseData = urlfetch.fetch(url=urlData % dev['uuid'], method = urlfetch.GET, headers = {\"X-AUTH-TOKEN\": token})","                fooData = responseData.content","                #self.response.write(fooData)","                headers = (\"s\",","                    \"ugm3\",","                    \"C\",","                    \"pc\",","                    \"ppm\",","                    \"ppb\",","                    \"%\")","                j = json.loads(fooData)","                dp = j['datapoints']","","                if dp:","                    latest = dp[0]","                    if latest:","                        postdata = {}","                        time = latest[0]","                        pm = latest[1]","                        sourceId = dev['name'].strip()","                        postdata['sourceId'] = sourceId","                        postdata['position'] = FOOBOT_LOCATIONS[sourceId]","                        postdata['pm25'] = str(pm)","                        taskqueue.add(url='/worker', params=postdata)","                        self.response.write(postdata)","        else:","            self.response.write(resLogin.content)","","","class Eaa(webapp2.RequestHandler):","","    def get(self):","","        def regData(country):","            isotoday = datetime.datetime.now().date().isoformat()","            url = \"http://fme.discomap.eea.europa.eu/fmedatastreaming/AirQuality/AirQualityUTDExport.fmw?FromDate=\" + isotoday + \"&ToDate=\" + isotoday + \"&Countrycode=\" + country + \"&InsertedSinceDate=&UpdatedSinceDate=&Pollutant=PM10&Namespace=&Format=XML&UserToken=6C2D03D8-04E1-4D07-B856-D92ACE0FA832\"","            response = urllib2.urlopen(url, timeout = 90)","            xmldoc = minidom.parse(response)","            records = xmldoc.getElementsByTagName('record')","            self.response.write(\"<br/><code>\" + url + \" - \" + str(len(records)) + \" <code><br/>\")","","            def getText(nodelist):","                rc = []","                for node in nodelist:","                    if node.nodeType == node.TEXT_NODE:","                        rc.append(node.data)","                return ''.join(rc).encode(\"utf-8\",\"ignore\")","","            for rec in records:","                postdata = {}","                station_code = rec.getElementsByTagName(\"station_code\")[0]","                station_name = rec.getElementsByTagName(\"station_name\")[0]","                pollutant = rec.getElementsByTagName(\"pollutant\")[0]","                samplingpoint_point = rec.getElementsByTagName(\"samplingpoint_point\")[0]","                value_numeric = rec.getElementsByTagName(\"value_numeric\")[0]","                posx = samplingpoint_point.attributes['x'].value","                posy = samplingpoint_point.attributes['y'].value","","                postdata['sourceId'] = \"EAA-\"+getText(station_code.childNodes)","                postdata['position'] = posy + \",\" + posx","                postdata[getText(pollutant.childNodes).lower()] = str(getText(value_numeric.childNodes))","                postdata['co'] = \"0.3\"","                postdata['no2'] = \"0.4\"","                self.response.write(postdata)","                taskqueue.add(url='/worker', params=postdata)","","","        country = self.request.get('country')","        regData(country)","        self.response.write(\"<br/><code>EAA DONE<code><br/>\")","","","","class Hamburg1(webapp2.RequestHandler):","","    def get(self):","        #print \"HBG\"","","        def regData(url, sourceId, position):","            response = urllib2.urlopen(url)","            cr = csv.reader(response)","            postdata = {","                'sourceId': '',","                'position': '',","                'pm10': '',","                'pm25': '',","                'o3': '',","                'co': '',","                'no2': ''","            }","            rlista = list(cr)[5]","            co = rlista[1]","","            try:","                co = rlista[1]","                postdata['co'] = str(((float(co))*24.4500)/28.0100) #Convert mg/m3 to ppm","            except Exception, e:","                print \"No co\"","","            try:","                no2 = rlista[3]","                postdata['no2'] = str(((float(no2)/1000.0000)*24.4500)/46.0100) #Convert mg/m3 to ppm","            except Exception, e:","                print \"No no2\"","","            postdata.sourceId = sourceId","            postdata.position = position","","            self.response.write(\"<br/><code>DONE \" + sourceId + \"<code><br/>\")","            taskqueue.add(url='/worker', params=postdata)","","        \"\"\"","        Data from http://luft.hamburg.de/","        \"\"\"","        regData(\"http://hamburg.luftmessnetz.de/station/70MB.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-70MB\", \"53.555555,9.943407\")","        regData(\"http://hamburg.luftmessnetz.de/station/17SM.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-17SM\", \"53.560899,9.957213\")","        regData(\"http://hamburg.luftmessnetz.de/station/68HB.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-68HB\", \"53.592354,10.053774\")","        regData(\"http://hamburg.luftmessnetz.de/station/24FL.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-24FL\", \"53.638128,9.996872\")","        regData(\"http://hamburg.luftmessnetz.de/station/61WB.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-61WB\", \"53.508315,9.990633\")","        regData(\"http://hamburg.luftmessnetz.de/station/13ST.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-13ST\", \"53.562087,9.964416\")","","class Goteborg(webapp2.RequestHandler):","","    def get(self):","        url = \"http://data.goteborg.se/AirQualityService/v1.0/LatestMeasurement/4abad3dd-5d24-4c9c-9d17-79a946abe6c2?format=json\"","        response = urllib2.urlopen(url);","        data = json.loads(response.read())","","        postdata = {","            'sourceId': 'GBG1',","            'position': '57.708870,11.974560',","            'pm10': '',","            'pm25': '',","            'o3': '',","            'co': '',","            'no2': ''","        }","        try:","        \tpm10 = data['AirQuality']['PM10']['Value']","        \tpostdata.pm10 = str(pm10)","        except Exception, e:","        \tprint \"no pm10\"","        \t#postdata['pm10'] = 0","","        try:","        \tno2 = data['AirQuality']['NO2']['Value']","        \tpostdata.no2 = str(((no2/1000.0000)*24.4500)/46.0100) #Convert mg/m3 to ppm","        except Exception, e:","        \tprint \"No no2\"","        \t#postdata['no2'] = 0","","        try:","        \tco = data['AirQuality']['CO']['Value']","        \tpostdata.co = str(((co/1000.0000)*24.4500)/28.0100) #Convert mg/m3 to ppm","        except Exception, e:","        \tprint \"No co\"","        \t#postdata['co'] = 0","","","        taskqueue.add(url='/worker', params=postdata)","","        self.response.write(postdata)","","","","class SubmitToQueue(webapp2.RequestHandler):","","    def post(self):","","        postdata = {}","","        try:","            pm10=self.request.get('pm10')","            postdata['pm10'] = str(pm10)","        except Exception, e:","            print \"no pm10\"","","        try:","            pm25=self.request.get('pm25')","            postdata['pm25'] = str(pm25)","        except Exception, e:","            print \"no pm25\"","","        try:","            o3=self.request.get('o3')","            postdata['o3'] = str(o3)","        except Exception, e:","            print \"No o3\"","","        try:","            no2=self.request.get('no2')","            postdata['no2'] = str(no2)","        except Exception, e:","            print \"No no2\"","","        try:","            co=self.request.get('co')","            postdata['co'] = str(co)","        except Exception, e:","            print \"No co\"","","        try:","            sourceId=self.request.get('sourceId')","            postdata['sourceId'] = sourceId","        except Exception, e:","            print \"No sourceId\"","","        try:","            lat=self.request.get('lat')","            lon=self.request.get('lon')","            postdata['position'] = lat + ',' + lon","        except Exception, e:","            print \"No position\"","","","        self.response.write(postdata)","","        taskqueue.add(url='/worker', params=postdata)","","","","class Umea(webapp2.RequestHandler):","    def get(self):","        #print \"#### UMEA ####\"","    \t#logging.info(\"UMEA\")","    \turl = \"http://ckan.openumea.se/api/action/datastore_search?resource_id=27fb8bcc-23cb-4e85-b5b4-fde68a8ef93a&limit=1&sort=M%C3%A4ttidpunkt%20desc\"","        try:","            response = urllib2.urlopen(url);","            data = json.loads(response.read())","        except Exception, e:","            print \"Error\"","","    \t#postdata = {}","    \ttry:","    \t\tpm10 = data['result']['records'][0]['PM10']","    \t\t#postdata['pm10'] = str(float(pm10))","    \texcept Exception, e:","    \t\tpm10 = 0","","        pm10str = str(float(pm10))","","    \ttry:","    \t\tno2 = data['result']['records'][0]['NO2']","    \t\t#postdata['no2'] = str(((no2/1000.0000)*24.4500)/46.0100) #Convert mg/m3 to ppm","    \texcept Exception, e:","    \t\tno2 = 0","","        no2str = str(((no2/1000.0000)*24.4500)/46.0100)","","        payload = {","            'sourceId': 'UMEA1',","            'position': '63.827743,20.256825',","            'pm10': pm10str,","            'pm25': '',","            'o3': '',","            'no2': no2str","        }","","        taskqueue.add(url='/worker', params=payload)","    \tself.response.write(payload)","","class Sthlm(webapp2.RequestHandler):","\tdef get(self):","\t\turl = \"http://slb.nu/cgi-bin/airweb.gifgraphic.cgi?format=txt&zmacro=lvf/air/timdatabas//lvf-kvavedioxd_flera.ic&from=130507&to=130508&path=/usr/airviro/data/sthlm/&lang=swe&rsrc=Halter.4.MainPage&st=lvf&regionPath=\"","\t\tresponse = urllib2.urlopen(url);","\t\tcr = csv.reader(response)","\t\tfor row in cr:","\t\t\tprint \"z\".join(row)","\t\t\t#for col in row:","\t\t\t\t#if col[:1] <> \"#\":","\t\t\t\t\t#print col","","","tableAqiIndex = [ range(0, 50, 1),range(51, 100, 1),range(101, 150, 1),range(151, 200, 1),range(201, 300, 1),range(301, 400, 1),range(401, 500, 1) ]","tableCo = [ range(0, 44, 1),range(45, 94, 1),range(95, 124, 1),range(125, 154, 1),range(155, 304, 1),range(305, 404, 1),range(405, 504, 1) ]","tableNo2 = [ range(0, 53, 1),range(54, 100, 1),range(101, 360, 1),range(361, 640, 1),range(650, 1240, 1),range(1250, 1640, 1),range(1650, 2040, 1) ]","tableO3 = [ range(0, 53, 1),range(54, 100, 1),range(101, 360, 1),range(361, 640, 1),range(650, 1240, 1),range(1250, 1640, 1),range(1650, 2040, 1) ]","tablePm10 = [ range(0, 54, 1),range(55, 154, 1),range(155, 254, 1),range(255, 354, 1),range(355, 424, 1),range(425, 504, 1),range(505, 604, 1) ]","tablePm25 = [ range(0, 54, 1),range(55, 154, 1),range(155, 254, 1),range(255, 354, 1),range(355, 424, 1),range(425, 504, 1),range(505, 604, 1) ]","indexLables = [\"Good\",\"Moderate\",\"Unhealthy for Sensitive Group\",\"Unhealthy\",\"Very Unhealthy\",\"Hazardous\",\"Hazardous\"]","","","def index(table, v, fac):","","    try:","        row = [i for i,l in enumerate(table) if int(v*fac) in l][0]","        bpLow = float(table[row][0])/fac","        bpHigh = (float(table[row][len(table[row])-1]+1)/fac)","        iLow = tableAqiIndex[row][0]","        iHigh = tableAqiIndex[row][len(tableAqiIndex[row])-1]+1","        index = (","            (float(iHigh) - float(iLow)) /","            (float(bpHigh) - float(bpLow))","            ) * (float(v)-(float(bpLow))) + float(iLow)","        return int(index)","    except Exception, e:","        print e","        return 0","","def aqi(values):","","    co=values[\"co\"]","    pm10=values[\"pm10\"]","    pm25=values[\"pm25\"]","    o3=values[\"o3\"]","    no2=values[\"no2\"]","","    #print \"%%%% AQI %%%%\"","    #print values","    #print \"ISDIG\"","    #print pm10","","    f = 0","    coIndex = 0","    pm10Index = 0","    pm25Index = 0","    o3Index = 0","    no2Index = 0","","    if co.replace('.','',1).isdigit():","        coIndex = index(tableCo, float(co), 10)","        f = f+1","","    if pm10.replace('.','',1).isdigit():","    \tpm10Index = index(tablePm10, float(pm10), 1)","    \tf = f+1","","    if pm25.replace('.','',1).isdigit():","    \tpm25Index = index(tablePm25, float(pm25), 1)","    \tf = f+1","","    if o3.replace('.','',1).isdigit():","    \to3Index = index(tableO3, float(o3), 1)","    \tf = f+1","","    # TODO: Check the factor","    if no2.replace('.','',1).isdigit():","    \tno2Index = index(tableNo2, float(no2), 1)","    \tf = f+1","","    if f > 0:","        return float((coIndex + pm10Index + pm25Index + o3Index + no2Index)/f)","","","","class cache(object):","    def __init__(self, fun):","        #print \"init cache\"","        self.fun = fun","        self.cache = {}","","    def __call__(self, *args, **kwargs):","        key  = str(args) + str(kwargs)","        #print \"call cache\"","","        try:","            #print \"return cache \" + key","            return self.cache[key]","        except KeyError:","            self.cache[key] = rval = self.fun(*args, **kwargs)","            return rval","        except TypeError: # incase key isn't a valid key - don't cache","            return self.fun(*args, **kwargs)","","@cache","def get_geolocation_url_src(url):","    return urllib2.urlopen(url).read()","","def getGeoValue(latlng, keys, valueType):","","    url=GEOLOCATION_URL % latlng","    data = json.loads(get_geolocation_url_src(url))","","    def getGeoValueForAddress(res):","        for key1 in keys:","            for ac in res[\"address_components\"]:","                if key1 in ac[\"types\"]:","                    return ac[valueType]","        return None","    for key in keys:","        for res in data[\"results\"]:","            if key in res[\"types\"]:","                returnVal = getGeoValueForAddress(res)","                return returnVal","    return None","","def getGeoFormattedAddress(latlng, keys):","    url=GEOLOCATION_URL % latlng","    data = json.loads(get_geolocation_url_src(url))","","    for key in keys:","        for res in data[\"results\"]:","            if key in res[\"types\"]:","                return res[\"formatted_address\"]","    return None","","def getGeoPosition(latlng, keys):","    url=GEOLOCATION_URL % latlng","    data = json.loads(get_geolocation_url_src(url))","","    for key in keys:","        for res in data[\"results\"]:","            if key in res[\"types\"]:","                return str(res[\"geometry\"][\"location\"][\"lat\"]) + \",\" + str(res[\"geometry\"][\"location\"][\"lng\"])","    return None","","","def getLocationContext(latlng):","    context = {}","    keyList = [\"neighborhood\",\"sublocality_level_2\",\"sublocality_level_1\",\"administrative_area_level_3\",\"colloquial_area\",\"postal_code\"]","    addrString = getGeoFormattedAddress(latlng, keyList).encode(\"utf-8\")","    hoodPosition = getGeoPosition(latlng, keyList)","    addrList = addrString.split(\", \")","    zoneTitle = addrList[0].decode(\"utf-8\",\"ignore\")","    addrList.remove(addrList[0])","    addrList.remove(addrList[-1])","    zoneSubTitle = \", \".join(addrList).decode(\"utf-8\")","","    country = getGeoValue(latlng, [\"country\"], \"short_name\")","","    context[\"zoneTitle\"] = zoneTitle","    context[\"zoneSubTitle\"] = zoneSubTitle","    context[\"country\"] = country","    context[\"zoneKey\"] = generateZoneKey(zoneTitle,zoneSubTitle,country)","    context[\"position\"] = hoodPosition","    return context","","def generateZoneKey(zoneTitle,zoneSubTitle,country):","    zoneKeyInputString = zoneTitle + zoneSubTitle + country","    zoneKey = hashlib.md5(zoneKeyInputString.encode('ascii', 'ignore').decode('ascii')).hexdigest()","    return zoneKey","","def test():","    robj = {}","    robj[\"country\"] = \"Sweden\"","    return robj","","\"\"\"","Stores the actual measurement data from the different sources.","TODO:","    1. Should store the position labels.","    2. Should not have to store the indexLabel. A dictionary will be included in the ZoneMessage.","\"\"\"","class RegisterRecord(webapp2.RequestHandler):","","","    def post(self): # should run at most 1/s","        # print \"#1. Worker is registering \"","        # Only needs timestamp, pm10, co, no2, position and sourceId as input.","        # The rest should be calculated here.","","        pm10=self.request.get('pm10')","        pm25=self.request.get('pm25')","        o3=self.request.get('o3')","        co=self.request.get('co')","        no2=self.request.get('no2')","","        #print \"PM10: \" + pm10","        #print \"CO: \" + co","        #print \"NO2: \" + no2","","        aqiValue=aqi({\"co\":co,\"pm10\":pm10,\"pm25\":pm25,\"o3\":o3,\"no2\":no2})","","        if aqiValue is None:","            print \"No AQI\"","        else:","            if not co.replace('.','',1).isdigit():","                co = None","            else:","                co = float(co)","","            if not pm10.replace('.','',1).isdigit():","                pm10 = None","            else:","                pm10 = float(pm10)","","            if not pm25.replace('.','',1).isdigit():","                pm25 = None","            else:","                pm25 = float(pm25)","","            if not o3.replace('.','',1).isdigit():","                o3 = None","            else:","                o3 = float(o3)","","            if not no2.replace('.','',1).isdigit() is None:","                no2 = None","            else:","                no2 = float(no2)","","            latlng = self.request.get('position')","","            locationContext = getLocationContext(latlng)","            zoneKey = locationContext.get('zoneKey')","            zoneTitle = locationContext.get('zoneTitle')","            zoneSubTitle = locationContext.get('zoneSubTitle')","            country = locationContext.get('country')","            position = locationContext.get('position')","","            #print calendar.timegm(time.gmtime())","            #print self.request.get('timestamp')","","            timestamp = self.request.get('timestamp')","            if not timestamp:","                timestamp = calendar.timegm(time.gmtime())","","            rec=Records(","                timestamp=datetime.datetime.fromtimestamp(float(timestamp)),","                pm10=pm10,","                pm25=pm25,","                o3=o3,","                co=co,","                no2=no2,","                zoneKey=zoneKey,","                # The index should be calculated here","                #index=self.request.get('index'),","                index=aqiValue,","                # TODO: Do a lookup to google","                position=self.request.get('position'),","                positionLabels=zoneTitle,","                sourceId=self.request.get('sourceId'),","            )","","            rec.put()","","            \"\"\"","            Now, generate the report...","            1. Hitta ytterligare poster i samma zone","            2. Rakna ut medeltal for index och de olika gaserna.","            3. Kolla om det finns en rapport sedan tidigare.","            4. spara historiska data","            5. Berakna min24hr och max 24hr","            \"\"\"","","            \"\"\" Get the data newer than 1 hour \"\"\"","            #res = db.GqlQuery(\"SELECT * FROM Records WHERE zoneKey='\" + zoneKey + \"' AND timestamp >= :1\", datetime.datetime.now() - datetime.timedelta(hours = 6))","            res = db.GqlQuery(\"SELECT * FROM Records WHERE zoneKey='\" + zoneKey + \"'\")","","","            \"\"\" Create a list of all stations and history values \"\"\"","            avrIndex = 0","            stationsDict = {}","            historyDict = {}","            indexArr = []","            for r in res:","                historyDate = r.timestamp.strftime('%Y-%m-%d')","                indexArr = historyDict.get(historyDate, [0.0])","                indexArr.append(r.index)","                historyDict[historyDate] = indexArr","                avrIndex = avrIndex + r.index","                stationsDict[r.sourceId] = str(r.position)","","            stations = []","            for key, value in stationsDict.iteritems():","                temp = {}","                temp[\"sourceId\"] = key","                temp[\"position\"] = value","","                stations.append(temp)","","            \"\"\" Add a proper locale. For now all languages are english \"\"\"","            class Location(): pass","            location = Location()","            location.country=country.upper()","            location.language=\"en\"","","","            \"\"\" Create a array of history records. Each record contains the date and the index for that date.  \"\"\"","            historyArr = []","            class HistoricDate():","                def __init__(self, dict):","                    self.__dict__ = dict","","            for key, value in historyDict.iteritems():","                historyArr.append(HistoricDate({'date' : key, 'index':reduce(lambda x, y: x + y, value) / (len(value)-1)}))","","            \"\"\" Create the zone-detail object that will be persisted as a report for use in the zones API \"\"\"","            class ZoneDetail():","                def to_JSON(self):","                    return json.dumps(self, default=lambda o: o.__dict__, sort_keys=True)","","            zd = ZoneDetail()","            zd.zoneKey=zoneKey","            zd.title=zoneTitle","            zd.subtitle=zoneSubTitle","            zd.stations=stations","            zd.numberOfMeasurements=str(res.count())","            if res.count() > 0:","                zd.index=avrIndex/res.count()","            else:","                zd.index=float(res[0].index)","            zd.co=co","            zd.no2=no2","            zd.pm10=pm10","            zd.pm25=pm25","            zd.o3=o3","            zd.location=location","            zd.position=position","            zd.history=historyArr","            zd.min24Hr=1.0","            zd.max24Hr=1.0","","            rec = Report(","                name=zoneTitle + \" \" + zoneSubTitle,","                key_name=zoneKey,","                zoneKey=zoneKey,","                report=zd.to_JSON()","            )","","            rec.put()","","            myKey = db.Key.from_path('Report', zoneKey)","            rec = db.get(myKey)","            rec.report = zd.to_JSON()","            rec.put()","","","","","","","class Index(webapp2.RequestHandler):","    def get(self):","\t\ttemplate_values = {","\t\t\t'greetings': 'zxc',","\t\t}","\t\ttemplate = JINJA_ENVIRONMENT.get_template('index.html')","\t\tself.response.write(template.render(template_values))","","","app = webapp2.WSGIApplication([","        ('/worker', RegisterRecord),","        ('/bot', Bot),","        ('/linkoping', Linkoping),","        ('/gbg1', Goteborg),","        ('/umea1', Umea),","        ('/hamburg1', Hamburg1),","        ('/sthlm', Sthlm),","        ('/eaa',Eaa),","        ('/foobot',Foobot),","        ('/submitToQueue',SubmitToQueue),","        ('/index.html', Index)","    ], debug=True)",""]}],[{"start":{"row":59,"column":14},"end":{"row":61,"column":16},"action":"remove","lines":["","import yaml","#import requests"],"id":205,"ignore":true},{"start":{"row":62,"column":0},"end":{"row":64,"column":0},"action":"insert","lines":["#SERVICE_URL = \"http://localhost:8888\"","SERVICE_URL = \"https://bamboo-zone-547.appspot.com\"",""]},{"start":{"row":67,"column":0},"end":{"row":73,"column":0},"action":"remove","lines":["FOOBOT_LOCATIONS = {","    \"flintbacken10\": \"59.310014,18.050748\",","    \"Bondegatan21-Ugnen\": \"59.312963,18.080363\",","    \"HappyWattBot05Bergsunds Strand\": \"59.316569,18.026894\",","    \"Peringskioldsvagen58\": \"59.35111,17.90213\",","}",""]},{"start":{"row":81,"column":0},"end":{"row":83,"column":0},"action":"remove","lines":["    pm25 = db.FloatProperty()","    o3 = db.FloatProperty()",""]},{"start":{"row":90,"column":0},"end":{"row":91,"column":0},"action":"remove","lines":["",""]},{"start":{"row":90,"column":6},"end":{"row":90,"column":9},"action":"remove","lines":["Bot"]},{"start":{"row":90,"column":6},"end":{"row":90,"column":15},"action":"insert","lines":["UrlTester"]},{"start":{"row":92,"column":8},"end":{"row":104,"column":20},"action":"remove","lines":["postdata = {}","        postdata['sourceId'] = \"BotFargfabriken\"","        postdata['position'] = \"59.31472280000001,18.02025470000001\"","        postdata['pm10'] = '22' # Should be a bit random","        taskqueue.add(url='/worker', params=postdata)","        self.response.write(postdata)","","","class Linkoping(webapp2.RequestHandler):","    def get(self):","        isotoday = datetime.datetime.now().date().isoformat()","        url = \"http://nods.se/rest/air/municipalities/0580?from=\" + isotoday + \"&minified=true\"","        headers = {'"]},{"start":{"row":92,"column":8},"end":{"row":116,"column":141},"action":"insert","lines":["urlfetch.set_default_fetch_deadline(60)","        base64string = base64.encodestring('%s:%s' % (\"lars@wattsgard.se\", \"AirUp123\")).replace('\\n', '')","        pl = {","            'password':'AirUp123'","        }","        headers = {","            'Accept':'application/json;charset=UTF-8',","            'Content-Type':'application/json'","        }","        # curl -X POST --header \"Content-Type: application/json\" --header \"Accept: application/json;charset=UTF-8\" -d \"{\\\"password\\\":\\\"AirUp123\\\"}\" \"http://api.foobot.io/v2/user/lars%40wattsgard.se/login/\"","        urlLogin = 'http://api.foobot.io/v2/user/lars@wattsgard.se/login/'","","        print base64string","","        #data = urllib.urlencode(pl)","        #opener = urllib2.build_opener(urllib2.HTTPHandler(debuglevel=1))","        #content = opener.open(urlLogin, data=data).read()","        #content.add_header(\"Content-Type\", \"application/json\")","        #content.add_header(\"Accept\", \"application/json;charset=UTF-8\")","        #content.add_header(\"Authorization\", \"Basic %s\" % base64string)","        ","","","        #","        #response = urlfetch.fetch(url=urlLogin, method = urlfetch.POST, payload=pl, headers = {\"Authorization\": \"Basic %s\" % base64string, \""]},{"start":{"row":116,"column":147},"end":{"row":116,"column":150},"action":"remove","lines":["':'"]},{"start":{"row":116,"column":147},"end":{"row":116,"column":151},"action":"insert","lines":["\": \""]},{"start":{"row":116,"column":181},"end":{"row":116,"column":184},"action":"remove","lines":["','"]},{"start":{"row":116,"column":181},"end":{"row":116,"column":185},"action":"insert","lines":["\", \""]},{"start":{"row":116,"column":197},"end":{"row":116,"column":200},"action":"remove","lines":["':'"]},{"start":{"row":116,"column":197},"end":{"row":116,"column":200},"action":"insert","lines":["\":\""]},{"start":{"row":116,"column":216},"end":{"row":116,"column":218},"action":"remove","lines":["'}"]},{"start":{"row":116,"column":216},"end":{"row":116,"column":219},"action":"insert","lines":["\"})"]},{"start":{"row":117,"column":11},"end":{"row":117,"column":14},"action":"remove","lines":["ult"]},{"start":{"row":117,"column":11},"end":{"row":117,"column":16},"action":"insert","lines":["ponse"]},{"start":{"row":117,"column":34},"end":{"row":119,"column":11},"action":"remove","lines":["","            url,","           "]},{"start":{"row":117,"column":34},"end":{"row":117,"column":108},"action":"insert","lines":["method=urlfetch.POST, url=urlLogin, payload=\"{\\\"password\\\":\\\"AirUp123\\\"}\","]},{"start":{"row":117,"column":124},"end":{"row":117,"column":125},"action":"remove","lines":[","]},{"start":{"row":117,"column":124},"end":{"row":118,"column":0},"action":"insert","lines":[")",""]},{"start":{"row":119,"column":8},"end":{"row":129,"column":10},"action":"remove","lines":["    method='GET'","        )","","        data = json.loads(result.content)","        dataLatest = data['airMeasurements'][0]","        postdata = {}","        time = dataLatest[\"time\"]","        pm = dataLatest[\"value\"]","        postdata['sourceId'] = \"Linkoping-hamngatan-nods\"","        postdata['position'] = \"58.408413,15.631572\"","        po"]},{"start":{"row":119,"column":8},"end":{"row":130,"column":20},"action":"insert","lines":["#request = urllib2.Request(urlLogin, data)","        #request.get_method = lambda: \"POST\"","        #request.add_header(\"Authorization\", \"Basic %s\" % base64string)","        #request.add_header(\"Accept\", \"application/json;charset=UTF-8\")","        #request.add_header(\"Content-Type\", \"application/json\")","        #self.response.write(\"hehe\")","","        #response = urllib2.urlopen(request)","        #token = response.info().getheader('X-AUTH-TOKEN')","        #self.response.write(token)","","        if response."]},{"start":{"row":130,"column":22},"end":{"row":130,"column":23},"action":"remove","lines":["d"]},{"start":{"row":130,"column":24},"end":{"row":132,"column":0},"action":"remove","lines":["a['pm10'] = str(pm)","        taskqueue.add(url='/worker', params=postdata)",""]},{"start":{"row":130,"column":24},"end":{"row":134,"column":4},"action":"insert","lines":["us_code == 200:","            token = response.headers['X-AUTH-TOKEN']","            self.response.write(token)","        else:","    "]},{"start":{"row":134,"column":32},"end":{"row":135,"column":0},"action":"remove","lines":["postdata)",""]},{"start":{"row":134,"column":32},"end":{"row":134,"column":49},"action":"insert","lines":["response.content)"]},{"start":{"row":140,"column":8},"end":{"row":141,"column":9},"action":"remove","lines":["print isotoday","        #"]},{"start":{"row":141,"column":0},"end":{"row":143,"column":0},"action":"remove","lines":["        urlLogin = 'http://api-eu-west-1.foobot.io/v2/user/lars%40wattsgard.se/login/'","",""]},{"start":{"row":141,"column":32},"end":{"row":141,"column":42},"action":"remove","lines":["-eu-west-1"]},{"start":{"row":141,"column":56},"end":{"row":141,"column":59},"action":"remove","lines":["%40"]},{"start":{"row":141,"column":56},"end":{"row":141,"column":57},"action":"insert","lines":["@"]},{"start":{"row":142,"column":30},"end":{"row":142,"column":40},"action":"remove","lines":["-eu-west-1"]},{"start":{"row":142,"column":64},"end":{"row":142,"column":108},"action":"remove","lines":["'+ isotoday + 'T00:00/' + isotoday + 'T23:59"]},{"start":{"row":142,"column":64},"end":{"row":142,"column":98},"action":"insert","lines":["2015-12-22T011:00/2015-12-22T12:00"]},{"start":{"row":145,"column":8},"end":{"row":145,"column":9},"action":"insert","lines":["#"]},{"start":{"row":146,"column":8},"end":{"row":146,"column":19},"action":"remove","lines":["headers = {"]},{"start":{"row":146,"column":8},"end":{"row":148,"column":12},"action":"insert","lines":["#response = urlfetch.fetch(url=urlLogin, method = urlfetch.GET, headers = {\"Authorization\": \"Basic %s\" % base64string})","        headers = {","            "]},{"start":{"row":148,"column":54},"end":{"row":149,"column":12},"action":"insert","lines":["","            "]},{"start":{"row":149,"column":45},"end":{"row":150,"column":0},"action":"remove","lines":["}",""]},{"start":{"row":150,"column":8},"end":{"row":150,"column":45},"action":"remove","lines":["payload=\"{\\\"password\\\":\\\"AirUp123\\\"}\""]},{"start":{"row":150,"column":8},"end":{"row":150,"column":17},"action":"insert","lines":["}        "]},{"start":{"row":151,"column":11},"end":{"row":151,"column":16},"action":"remove","lines":["Login"]},{"start":{"row":151,"column":11},"end":{"row":151,"column":16},"action":"insert","lines":["ponse"]},{"start":{"row":151,"column":34},"end":{"row":157,"column":0},"action":"remove","lines":["","            urlLogin,","            headers=headers,","            method='POST',","            payload=payload","        )",""]},{"start":{"row":151,"column":34},"end":{"row":151,"column":125},"action":"insert","lines":["method=urlfetch.POST, url=urlLogin, payload=\"{\\\"password\\\":\\\"AirUp123\\\"}\", headers=headers)"]},{"start":{"row":152,"column":14},"end":{"row":152,"column":19},"action":"remove","lines":["Login"]},{"start":{"row":152,"column":14},"end":{"row":152,"column":19},"action":"insert","lines":["ponse"]},{"start":{"row":153,"column":0},"end":{"row":154,"column":0},"action":"insert","lines":["            ",""]},{"start":{"row":154,"column":23},"end":{"row":154,"column":28},"action":"remove","lines":["Login"]},{"start":{"row":154,"column":23},"end":{"row":154,"column":28},"action":"insert","lines":["ponse"]},{"start":{"row":155,"column":12},"end":{"row":156,"column":121},"action":"remove","lines":["# 2 use the token to get all devices","            headers = {'Accept':'application/json;charset=UTF-8','Content-Type':'application/json','X-AUTH-TOKEN': token}"]},{"start":{"row":155,"column":12},"end":{"row":158,"column":48},"action":"insert","lines":["print \"###TOKEN\"","            print token","            #self.response.write(token)","            # 2 use the token to get all devices"]},{"start":{"row":159,"column":20},"end":{"row":159,"column":23},"action":"remove","lines":["Dev"]},{"start":{"row":159,"column":38},"end":{"row":163,"column":13},"action":"remove","lines":["","                urlDevice,","                method='GET',","                headers = headers","            )"]},{"start":{"row":159,"column":38},"end":{"row":160,"column":34},"action":"insert","lines":["url=urlDevice, method = urlfetch.GET, headers = {\"X-AUTH-TOKEN\": token})","            print response.content"]},{"start":{"row":161,"column":41},"end":{"row":161,"column":44},"action":"remove","lines":["Dev"]},{"start":{"row":165,"column":16},"end":{"row":165,"column":22},"action":"remove","lines":["#self."]},{"start":{"row":165,"column":24},"end":{"row":167,"column":28},"action":"remove","lines":[".write(dev)","                #print dev['uuid']","                responseData"]},{"start":{"row":166,"column":34},"end":{"row":166,"column":38},"action":"remove","lines":["Data"]},{"start":{"row":167,"column":0},"end":{"row":168,"column":0},"action":"remove","lines":["                #self.response.write(fooData)",""]},{"start":{"row":183,"column":24},"end":{"row":183,"column":34},"action":"insert","lines":["postdata['"]},{"start":{"row":183,"column":42},"end":{"row":183,"column":44},"action":"insert","lines":["']"]},{"start":{"row":183,"column":58},"end":{"row":183,"column":66},"action":"remove","lines":[".strip()"]},{"start":{"row":184,"column":34},"end":{"row":184,"column":55},"action":"remove","lines":["sourceId'] = sourceId"]},{"start":{"row":184,"column":34},"end":{"row":184,"column":68},"action":"insert","lines":["position'] = \"59.312963,18.080363\""]},{"start":{"row":185,"column":35},"end":{"row":185,"column":73},"action":"remove","lines":["osition'] = FOOBOT_LOCATIONS[sourceId]"]},{"start":{"row":185,"column":35},"end":{"row":185,"column":50},"action":"insert","lines":["m10'] = str(pm)"]},{"start":{"row":186,"column":24},"end":{"row":186,"column":30},"action":"insert","lines":["print "]},{"start":{"row":186,"column":38},"end":{"row":186,"column":56},"action":"remove","lines":["['pm25'] = str(pm)"]},{"start":{"row":188,"column":8},"end":{"row":188,"column":12},"action":"remove","lines":["    "]},{"start":{"row":188,"column":8},"end":{"row":189,"column":0},"action":"insert","lines":["else:",""]},{"start":{"row":189,"column":32},"end":{"row":189,"column":34},"action":"remove","lines":["po"]},{"start":{"row":189,"column":32},"end":{"row":189,"column":41},"action":"insert","lines":["response."]},{"start":{"row":189,"column":43},"end":{"row":189,"column":44},"action":"remove","lines":["d"]},{"start":{"row":189,"column":45},"end":{"row":191,"column":4},"action":"remove","lines":["a)","        else:","    "]},{"start":{"row":189,"column":45},"end":{"row":191,"column":0},"action":"insert","lines":["us_code)","",""]},{"start":{"row":191,"column":28},"end":{"row":191,"column":45},"action":"remove","lines":["resLogin.content)"]},{"start":{"row":191,"column":28},"end":{"row":192,"column":0},"action":"insert","lines":["\"<strong>DONE</strong>\")",""]},{"start":{"row":230,"column":0},"end":{"row":233,"column":0},"action":"insert","lines":["                #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","                #req.add_header('Content-Type', 'application/json')","                #response = urllib2.urlopen(req, json.dumps(postdata))",""]},{"start":{"row":254,"column":0},"end":{"row":256,"column":0},"action":"remove","lines":["                'pm25': '',","                'o3': '',",""]},{"start":{"row":275,"column":0},"end":{"row":280,"column":0},"action":"insert","lines":["            #req = urllib2.Request('https://bamboo-zone-547.appspot.com/_ah/api/airup/v1/queueIt')","            #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","            #req.add_header('Content-Type', 'application/json')","            #response = urllib2.urlopen(req, json.dumps(postdata))","",""]},{"start":{"row":283,"column":0},"end":{"row":284,"column":0},"action":"insert","lines":["",""]},{"start":{"row":286,"column":8},"end":{"row":286,"column":11},"action":"remove","lines":["\"\"\""]},{"start":{"row":286,"column":8},"end":{"row":292,"column":193},"action":"insert","lines":["24FL - 53.638128,9.996872","        70MB - 53.555555,9.943407","        17SM - 53.560899,9.957213","        68HB - 53.592354,10.053774","        61WB - 53.508315,9.990633","        \"\"\"","                #http://hamburg.luftmessnetz.de/station/24FL.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday&searchfrom=02.01.2016+00%3A00&searchuntil=03.01.2016+00%3A00"]},{"start":{"row":298,"column":0},"end":{"row":298,"column":171},"action":"remove","lines":["        regData(\"http://hamburg.luftmessnetz.de/station/13ST.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-13ST\", \"53.562087,9.964416\")"]},{"start":{"row":311,"column":0},"end":{"row":313,"column":0},"action":"remove","lines":["            'pm25': '',","            'o3': '',",""]},{"start":{"row":338,"column":0},"end":{"row":341,"column":0},"action":"insert","lines":["        #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","        #req.add_header('Content-Type', 'application/json')","        #response = urllib2.urlopen(req, json.dumps(postdata))",""]},{"start":{"row":357,"column":0},"end":{"row":369,"column":0},"action":"remove","lines":["        try:","            pm25=self.request.get('pm25')","            postdata['pm25'] = str(pm25)","        except Exception, e:","            print \"no pm25\"","","        try:","            o3=self.request.get('o3')","            postdata['o3'] = str(o3)","        except Exception, e:","            print \"No o3\"","",""]},{"start":{"row":385,"column":0},"end":{"row":388,"column":0},"action":"insert","lines":["        #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","        #req.add_header('Content-Type', 'application/json')","        #response = urllib2.urlopen(req, json.dumps(postdata))",""]},{"start":{"row":424,"column":13},"end":{"row":424,"column":23},"action":"remove","lines":["pm25': '',"]},{"start":{"row":424,"column":13},"end":{"row":424,"column":25},"action":"insert","lines":["no2': no2str"]},{"start":{"row":425,"column":8},"end":{"row":427,"column":0},"action":"insert","lines":["}","",""]},{"start":{"row":427,"column":4},"end":{"row":430,"column":0},"action":"remove","lines":["'o3': '',","            'no2': no2str","        }",""]},{"start":{"row":427,"column":4},"end":{"row":429,"column":52},"action":"insert","lines":["    #postdata['sourceId'] = 'UMEA1'","        #postdata['position'] = '63.827743,20.256825'","        taskqueue.add(url='/worker', params=payload)"]},{"start":{"row":430,"column":8},"end":{"row":430,"column":9},"action":"insert","lines":["#"]},{"start":{"row":430,"column":27},"end":{"row":430,"column":28},"action":"remove","lines":["'"]},{"start":{"row":430,"column":27},"end":{"row":430,"column":28},"action":"insert","lines":["\""]},{"start":{"row":430,"column":35},"end":{"row":430,"column":38},"action":"remove","lines":["', "]},{"start":{"row":430,"column":35},"end":{"row":430,"column":37},"action":"insert","lines":["\","]},{"start":{"row":430,"column":44},"end":{"row":430,"column":51},"action":"remove","lines":["payload"]},{"start":{"row":430,"column":44},"end":{"row":434,"column":58},"action":"insert","lines":["{postdata})","","    \t#req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","    \t#req.add_header('Content-Type', 'application/json')","    \t#response = urllib2.urlopen(req, json.dumps(postdata)"]},{"start":{"row":452,"column":5},"end":{"row":454,"column":9},"action":"remove","lines":["O3 = [ range(0, 53, 1),range(54, 100, 1),range(101, 360, 1),range(361, 640, 1),range(650, 1240, 1),range(1250, 1640, 1),range(1650, 2040, 1) ]","tablePm10 = [ range(0, 54, 1),range(55, 154, 1),range(155, 254, 1),range(255, 354, 1),range(355, 424, 1),range(425, 504, 1),range(505, 604, 1) ]","tablePm25"]},{"start":{"row":452,"column":5},"end":{"row":452,"column":9},"action":"insert","lines":["Pm10"]},{"start":{"row":477,"column":0},"end":{"row":479,"column":0},"action":"remove","lines":["    pm25=values[\"pm25\"]","    o3=values[\"o3\"]",""]},{"start":{"row":487,"column":0},"end":{"row":489,"column":0},"action":"remove","lines":["    pm25Index = 0","    o3Index = 0",""]},{"start":{"row":497,"column":0},"end":{"row":505,"column":0},"action":"remove","lines":["    if pm25.replace('.','',1).isdigit():","    \tpm25Index = index(tablePm25, float(pm25), 1)","    \tf = f+1","","    if o3.replace('.','',1).isdigit():","    \to3Index = index(tableO3, float(o3), 1)","    \tf = f+1","",""]},{"start":{"row":503,"column":29},"end":{"row":503,"column":32},"action":"remove","lines":[" + "]},{"start":{"row":503,"column":29},"end":{"row":503,"column":30},"action":"insert","lines":["+"]},{"start":{"row":503,"column":39},"end":{"row":503,"column":64},"action":"remove","lines":[" + pm25Index + o3Index + "]},{"start":{"row":503,"column":39},"end":{"row":503,"column":40},"action":"insert","lines":["+"]},{"start":{"row":614,"column":0},"end":{"row":616,"column":0},"action":"remove","lines":["        pm25=self.request.get('pm25')","        o3=self.request.get('o3')",""]},{"start":{"row":621,"column":43},"end":{"row":621,"column":63},"action":"remove","lines":["pm25\":pm25,\"o3\":o3,\""]},{"start":{"row":636,"column":0},"end":{"row":646,"column":0},"action":"remove","lines":["            if not pm25.replace('.','',1).isdigit():","                pm25 = None","            else:","                pm25 = float(pm25)","","            if not o3.replace('.','',1).isdigit():","                o3 = None","            else:","                o3 = float(o3)","",""]},{"start":{"row":660,"column":0},"end":{"row":662,"column":0},"action":"remove","lines":["                pm25=pm25,","                o3=o3,",""]},{"start":{"row":739,"column":32},"end":{"row":739,"column":34},"action":"remove","lines":["es"]},{"start":{"row":743,"column":0},"end":{"row":745,"column":0},"action":"remove","lines":["            zd.pm25=pm25","            zd.o3=o3",""]},{"start":{"row":779,"column":11},"end":{"row":780,"column":32},"action":"remove","lines":["bot', Bot),","        ('/linkoping', Linkoping"]},{"start":{"row":779,"column":11},"end":{"row":779,"column":29},"action":"insert","lines":["tester', UrlTester"]}],[{"start":{"row":59,"column":14},"end":{"row":61,"column":16},"action":"insert","lines":["","import yaml","#import requests"],"id":206,"ignore":true},{"start":{"row":64,"column":0},"end":{"row":66,"column":0},"action":"remove","lines":["#SERVICE_URL = \"http://localhost:8888\"","SERVICE_URL = \"https://bamboo-zone-547.appspot.com\"",""]},{"start":{"row":67,"column":0},"end":{"row":73,"column":0},"action":"insert","lines":["FOOBOT_LOCATIONS = {","    \"flintbacken10\": \"59.310014,18.050748\",","    \"Bondegatan21-Ugnen\": \"59.312963,18.080363\",","    \"HappyWattBot05Bergsunds Strand\": \"59.316569,18.026894\",","    \"Peringskioldsvagen58\": \"59.35111,17.90213\",","}",""]},{"start":{"row":87,"column":0},"end":{"row":89,"column":0},"action":"insert","lines":["    pm25 = db.FloatProperty()","    o3 = db.FloatProperty()",""]},{"start":{"row":98,"column":0},"end":{"row":99,"column":0},"action":"insert","lines":["",""]},{"start":{"row":99,"column":6},"end":{"row":99,"column":15},"action":"remove","lines":["UrlTester"]},{"start":{"row":99,"column":6},"end":{"row":99,"column":9},"action":"insert","lines":["Bot"]},{"start":{"row":101,"column":8},"end":{"row":125,"column":141},"action":"remove","lines":["urlfetch.set_default_fetch_deadline(60)","        base64string = base64.encodestring('%s:%s' % (\"lars@wattsgard.se\", \"AirUp123\")).replace('\\n', '')","        pl = {","            'password':'AirUp123'","        }","        headers = {","            'Accept':'application/json;charset=UTF-8',","            'Content-Type':'application/json'","        }","        # curl -X POST --header \"Content-Type: application/json\" --header \"Accept: application/json;charset=UTF-8\" -d \"{\\\"password\\\":\\\"AirUp123\\\"}\" \"http://api.foobot.io/v2/user/lars%40wattsgard.se/login/\"","        urlLogin = 'http://api.foobot.io/v2/user/lars@wattsgard.se/login/'","","        print base64string","","        #data = urllib.urlencode(pl)","        #opener = urllib2.build_opener(urllib2.HTTPHandler(debuglevel=1))","        #content = opener.open(urlLogin, data=data).read()","        #content.add_header(\"Content-Type\", \"application/json\")","        #content.add_header(\"Accept\", \"application/json;charset=UTF-8\")","        #content.add_header(\"Authorization\", \"Basic %s\" % base64string)","        ","","","        #","        #response = urlfetch.fetch(url=urlLogin, method = urlfetch.POST, payload=pl, headers = {\"Authorization\": \"Basic %s\" % base64string, \""]},{"start":{"row":101,"column":8},"end":{"row":113,"column":20},"action":"insert","lines":["postdata = {}","        postdata['sourceId'] = \"BotFargfabriken\"","        postdata['position'] = \"59.31472280000001,18.02025470000001\"","        postdata['pm10'] = '22' # Should be a bit random","        taskqueue.add(url='/worker', params=postdata)","        self.response.write(postdata)","","","class Linkoping(webapp2.RequestHandler):","    def get(self):","        isotoday = datetime.datetime.now().date().isoformat()","        url = \"http://nods.se/rest/air/municipalities/0580?from=\" + isotoday + \"&minified=true\"","        headers = {'"]},{"start":{"row":113,"column":26},"end":{"row":113,"column":30},"action":"remove","lines":["\": \""]},{"start":{"row":113,"column":26},"end":{"row":113,"column":29},"action":"insert","lines":["':'"]},{"start":{"row":113,"column":59},"end":{"row":113,"column":63},"action":"remove","lines":["\", \""]},{"start":{"row":113,"column":59},"end":{"row":113,"column":62},"action":"insert","lines":["','"]},{"start":{"row":113,"column":74},"end":{"row":113,"column":77},"action":"remove","lines":["\":\""]},{"start":{"row":113,"column":74},"end":{"row":113,"column":77},"action":"insert","lines":["':'"]},{"start":{"row":113,"column":93},"end":{"row":113,"column":96},"action":"remove","lines":["\"})"]},{"start":{"row":113,"column":93},"end":{"row":113,"column":95},"action":"insert","lines":["'}"]},{"start":{"row":114,"column":11},"end":{"row":114,"column":16},"action":"remove","lines":["ponse"]},{"start":{"row":114,"column":11},"end":{"row":114,"column":14},"action":"insert","lines":["ult"]},{"start":{"row":114,"column":32},"end":{"row":114,"column":106},"action":"remove","lines":["method=urlfetch.POST, url=urlLogin, payload=\"{\\\"password\\\":\\\"AirUp123\\\"}\","]},{"start":{"row":114,"column":32},"end":{"row":116,"column":11},"action":"insert","lines":["","            url,","           "]},{"start":{"row":116,"column":27},"end":{"row":117,"column":0},"action":"remove","lines":[")",""]},{"start":{"row":116,"column":27},"end":{"row":116,"column":28},"action":"insert","lines":[","]},{"start":{"row":117,"column":8},"end":{"row":128,"column":20},"action":"remove","lines":["#request = urllib2.Request(urlLogin, data)","        #request.get_method = lambda: \"POST\"","        #request.add_header(\"Authorization\", \"Basic %s\" % base64string)","        #request.add_header(\"Accept\", \"application/json;charset=UTF-8\")","        #request.add_header(\"Content-Type\", \"application/json\")","        #self.response.write(\"hehe\")","","        #response = urllib2.urlopen(request)","        #token = response.info().getheader('X-AUTH-TOKEN')","        #self.response.write(token)","","        if response."]},{"start":{"row":117,"column":8},"end":{"row":127,"column":10},"action":"insert","lines":["    method='GET'","        )","","        data = json.loads(result.content)","        dataLatest = data['airMeasurements'][0]","        postdata = {}","        time = dataLatest[\"time\"]","        pm = dataLatest[\"value\"]","        postdata['sourceId'] = \"Linkoping-hamngatan-nods\"","        postdata['position'] = \"58.408413,15.631572\"","        po"]},{"start":{"row":127,"column":12},"end":{"row":127,"column":13},"action":"insert","lines":["d"]},{"start":{"row":127,"column":15},"end":{"row":131,"column":4},"action":"remove","lines":["us_code == 200:","            token = response.headers['X-AUTH-TOKEN']","            self.response.write(token)","        else:","    "]},{"start":{"row":127,"column":15},"end":{"row":129,"column":0},"action":"insert","lines":["a['pm10'] = str(pm)","        taskqueue.add(url='/worker', params=postdata)",""]},{"start":{"row":129,"column":28},"end":{"row":129,"column":45},"action":"remove","lines":["response.content)"]},{"start":{"row":129,"column":28},"end":{"row":130,"column":0},"action":"insert","lines":["postdata)",""]},{"start":{"row":136,"column":8},"end":{"row":137,"column":9},"action":"insert","lines":["print isotoday","        #"]},{"start":{"row":138,"column":0},"end":{"row":140,"column":0},"action":"insert","lines":["        urlLogin = 'http://api-eu-west-1.foobot.io/v2/user/lars%40wattsgard.se/login/'","",""]},{"start":{"row":140,"column":32},"end":{"row":140,"column":42},"action":"insert","lines":["-eu-west-1"]},{"start":{"row":140,"column":66},"end":{"row":140,"column":67},"action":"remove","lines":["@"]},{"start":{"row":140,"column":66},"end":{"row":140,"column":69},"action":"insert","lines":["%40"]},{"start":{"row":141,"column":30},"end":{"row":141,"column":40},"action":"insert","lines":["-eu-west-1"]},{"start":{"row":141,"column":74},"end":{"row":141,"column":108},"action":"remove","lines":["2015-12-22T011:00/2015-12-22T12:00"]},{"start":{"row":141,"column":74},"end":{"row":141,"column":118},"action":"insert","lines":["'+ isotoday + 'T00:00/' + isotoday + 'T23:59"]},{"start":{"row":144,"column":8},"end":{"row":144,"column":9},"action":"remove","lines":["#"]},{"start":{"row":145,"column":8},"end":{"row":147,"column":12},"action":"remove","lines":["#response = urlfetch.fetch(url=urlLogin, method = urlfetch.GET, headers = {\"Authorization\": \"Basic %s\" % base64string})","        headers = {","            "]},{"start":{"row":145,"column":8},"end":{"row":145,"column":19},"action":"insert","lines":["headers = {"]},{"start":{"row":145,"column":61},"end":{"row":146,"column":12},"action":"remove","lines":["","            "]},{"start":{"row":145,"column":94},"end":{"row":146,"column":0},"action":"insert","lines":["}",""]},{"start":{"row":147,"column":8},"end":{"row":147,"column":17},"action":"remove","lines":["}        "]},{"start":{"row":147,"column":8},"end":{"row":147,"column":45},"action":"insert","lines":["payload=\"{\\\"password\\\":\\\"AirUp123\\\"}\""]},{"start":{"row":148,"column":11},"end":{"row":148,"column":16},"action":"remove","lines":["ponse"]},{"start":{"row":148,"column":11},"end":{"row":148,"column":16},"action":"insert","lines":["Login"]},{"start":{"row":148,"column":34},"end":{"row":148,"column":125},"action":"remove","lines":["method=urlfetch.POST, url=urlLogin, payload=\"{\\\"password\\\":\\\"AirUp123\\\"}\", headers=headers)"]},{"start":{"row":148,"column":34},"end":{"row":154,"column":0},"action":"insert","lines":["","            urlLogin,","            headers=headers,","            method='POST',","            payload=payload","        )",""]},{"start":{"row":155,"column":14},"end":{"row":155,"column":19},"action":"remove","lines":["ponse"]},{"start":{"row":155,"column":14},"end":{"row":155,"column":19},"action":"insert","lines":["Login"]},{"start":{"row":156,"column":0},"end":{"row":157,"column":0},"action":"remove","lines":["            ",""]},{"start":{"row":156,"column":23},"end":{"row":156,"column":28},"action":"remove","lines":["ponse"]},{"start":{"row":156,"column":23},"end":{"row":156,"column":28},"action":"insert","lines":["Login"]},{"start":{"row":157,"column":12},"end":{"row":160,"column":48},"action":"remove","lines":["print \"###TOKEN\"","            print token","            #self.response.write(token)","            # 2 use the token to get all devices"]},{"start":{"row":157,"column":12},"end":{"row":158,"column":121},"action":"insert","lines":["# 2 use the token to get all devices","            headers = {'Accept':'application/json;charset=UTF-8','Content-Type':'application/json','X-AUTH-TOKEN': token}"]},{"start":{"row":159,"column":20},"end":{"row":159,"column":23},"action":"insert","lines":["Dev"]},{"start":{"row":159,"column":41},"end":{"row":160,"column":34},"action":"remove","lines":["url=urlDevice, method = urlfetch.GET, headers = {\"X-AUTH-TOKEN\": token})","            print response.content"]},{"start":{"row":159,"column":41},"end":{"row":163,"column":13},"action":"insert","lines":["","                urlDevice,","                method='GET',","                headers = headers","            )"]},{"start":{"row":164,"column":41},"end":{"row":164,"column":44},"action":"insert","lines":["Dev"]},{"start":{"row":168,"column":16},"end":{"row":168,"column":22},"action":"insert","lines":["#self."]},{"start":{"row":168,"column":30},"end":{"row":170,"column":28},"action":"insert","lines":[".write(dev)","                #print dev['uuid']","                responseData"]},{"start":{"row":171,"column":34},"end":{"row":171,"column":38},"action":"insert","lines":["Data"]},{"start":{"row":172,"column":0},"end":{"row":173,"column":0},"action":"insert","lines":["                #self.response.write(fooData)",""]},{"start":{"row":189,"column":24},"end":{"row":189,"column":34},"action":"remove","lines":["postdata['"]},{"start":{"row":189,"column":32},"end":{"row":189,"column":34},"action":"remove","lines":["']"]},{"start":{"row":189,"column":46},"end":{"row":189,"column":54},"action":"insert","lines":[".strip()"]},{"start":{"row":190,"column":34},"end":{"row":190,"column":68},"action":"remove","lines":["position'] = \"59.312963,18.080363\""]},{"start":{"row":190,"column":34},"end":{"row":190,"column":55},"action":"insert","lines":["sourceId'] = sourceId"]},{"start":{"row":191,"column":35},"end":{"row":191,"column":50},"action":"remove","lines":["m10'] = str(pm)"]},{"start":{"row":191,"column":35},"end":{"row":191,"column":73},"action":"insert","lines":["osition'] = FOOBOT_LOCATIONS[sourceId]"]},{"start":{"row":192,"column":24},"end":{"row":192,"column":30},"action":"remove","lines":["print "]},{"start":{"row":192,"column":32},"end":{"row":192,"column":50},"action":"insert","lines":["['pm25'] = str(pm)"]},{"start":{"row":194,"column":8},"end":{"row":195,"column":0},"action":"remove","lines":["else:",""]},{"start":{"row":194,"column":8},"end":{"row":194,"column":12},"action":"insert","lines":["    "]},{"start":{"row":194,"column":44},"end":{"row":194,"column":53},"action":"remove","lines":["response."]},{"start":{"row":194,"column":44},"end":{"row":194,"column":46},"action":"insert","lines":["po"]},{"start":{"row":194,"column":48},"end":{"row":194,"column":49},"action":"insert","lines":["d"]},{"start":{"row":194,"column":51},"end":{"row":196,"column":0},"action":"remove","lines":["us_code)","",""]},{"start":{"row":194,"column":51},"end":{"row":196,"column":4},"action":"insert","lines":["a)","        else:","    "]},{"start":{"row":196,"column":32},"end":{"row":197,"column":0},"action":"remove","lines":["\"<strong>DONE</strong>\")",""]},{"start":{"row":196,"column":32},"end":{"row":196,"column":49},"action":"insert","lines":["resLogin.content)"]},{"start":{"row":234,"column":0},"end":{"row":237,"column":0},"action":"remove","lines":["                #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","                #req.add_header('Content-Type', 'application/json')","                #response = urllib2.urlopen(req, json.dumps(postdata))",""]},{"start":{"row":255,"column":0},"end":{"row":257,"column":0},"action":"insert","lines":["                'pm25': '',","                'o3': '',",""]},{"start":{"row":278,"column":0},"end":{"row":283,"column":0},"action":"remove","lines":["            #req = urllib2.Request('https://bamboo-zone-547.appspot.com/_ah/api/airup/v1/queueIt')","            #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","            #req.add_header('Content-Type', 'application/json')","            #response = urllib2.urlopen(req, json.dumps(postdata))","",""]},{"start":{"row":281,"column":0},"end":{"row":282,"column":0},"action":"remove","lines":["",""]},{"start":{"row":283,"column":8},"end":{"row":289,"column":193},"action":"remove","lines":["24FL - 53.638128,9.996872","        70MB - 53.555555,9.943407","        17SM - 53.560899,9.957213","        68HB - 53.592354,10.053774","        61WB - 53.508315,9.990633","        \"\"\"","                #http://hamburg.luftmessnetz.de/station/24FL.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday&searchfrom=02.01.2016+00%3A00&searchuntil=03.01.2016+00%3A00"]},{"start":{"row":283,"column":8},"end":{"row":283,"column":11},"action":"insert","lines":["\"\"\""]},{"start":{"row":289,"column":0},"end":{"row":289,"column":171},"action":"insert","lines":["        regData(\"http://hamburg.luftmessnetz.de/station/13ST.csv?componentgroup=pollution&componentperiod=1h&searchperiod=currentday\",\"Hamburg-13ST\", \"53.562087,9.964416\")"]},{"start":{"row":302,"column":0},"end":{"row":304,"column":0},"action":"insert","lines":["            'pm25': '',","            'o3': '',",""]},{"start":{"row":331,"column":0},"end":{"row":334,"column":0},"action":"remove","lines":["        #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","        #req.add_header('Content-Type', 'application/json')","        #response = urllib2.urlopen(req, json.dumps(postdata))",""]},{"start":{"row":347,"column":0},"end":{"row":359,"column":0},"action":"insert","lines":["        try:","            pm25=self.request.get('pm25')","            postdata['pm25'] = str(pm25)","        except Exception, e:","            print \"no pm25\"","","        try:","            o3=self.request.get('o3')","            postdata['o3'] = str(o3)","        except Exception, e:","            print \"No o3\"","",""]},{"start":{"row":387,"column":0},"end":{"row":390,"column":0},"action":"remove","lines":["        #req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","        #req.add_header('Content-Type', 'application/json')","        #response = urllib2.urlopen(req, json.dumps(postdata))",""]},{"start":{"row":423,"column":13},"end":{"row":423,"column":25},"action":"remove","lines":["no2': no2str"]},{"start":{"row":423,"column":13},"end":{"row":423,"column":23},"action":"insert","lines":["pm25': '',"]},{"start":{"row":424,"column":8},"end":{"row":426,"column":0},"action":"remove","lines":["}","",""]},{"start":{"row":424,"column":12},"end":{"row":426,"column":52},"action":"remove","lines":["    #postdata['sourceId'] = 'UMEA1'","        #postdata['position'] = '63.827743,20.256825'","        taskqueue.add(url='/worker', params=payload)"]},{"start":{"row":424,"column":12},"end":{"row":427,"column":0},"action":"insert","lines":["'o3': '',","            'no2': no2str","        }",""]},{"start":{"row":428,"column":8},"end":{"row":428,"column":9},"action":"remove","lines":["#"]},{"start":{"row":428,"column":26},"end":{"row":428,"column":27},"action":"remove","lines":["\""]},{"start":{"row":428,"column":26},"end":{"row":428,"column":27},"action":"insert","lines":["'"]},{"start":{"row":428,"column":34},"end":{"row":428,"column":36},"action":"remove","lines":["\","]},{"start":{"row":428,"column":34},"end":{"row":428,"column":37},"action":"insert","lines":["', "]},{"start":{"row":428,"column":44},"end":{"row":432,"column":58},"action":"remove","lines":["{postdata})","","    \t#req = urllib2.Request(SERVICE_URL + '/_ah/api/airup/v1/queueIt')","    \t#req.add_header('Content-Type', 'application/json')","    \t#response = urllib2.urlopen(req, json.dumps(postdata)"]},{"start":{"row":428,"column":44},"end":{"row":428,"column":51},"action":"insert","lines":["payload"]},{"start":{"row":446,"column":5},"end":{"row":446,"column":9},"action":"remove","lines":["Pm10"]},{"start":{"row":446,"column":5},"end":{"row":448,"column":9},"action":"insert","lines":["O3 = [ range(0, 53, 1),range(54, 100, 1),range(101, 360, 1),range(361, 640, 1),range(650, 1240, 1),range(1250, 1640, 1),range(1650, 2040, 1) ]","tablePm10 = [ range(0, 54, 1),range(55, 154, 1),range(155, 254, 1),range(255, 354, 1),range(355, 424, 1),range(425, 504, 1),range(505, 604, 1) ]","tablePm25"]},{"start":{"row":473,"column":0},"end":{"row":475,"column":0},"action":"insert","lines":["    pm25=values[\"pm25\"]","    o3=values[\"o3\"]",""]},{"start":{"row":485,"column":0},"end":{"row":487,"column":0},"action":"insert","lines":["    pm25Index = 0","    o3Index = 0",""]},{"start":{"row":497,"column":0},"end":{"row":505,"column":0},"action":"insert","lines":["    if pm25.replace('.','',1).isdigit():","    \tpm25Index = index(tablePm25, float(pm25), 1)","    \tf = f+1","","    if o3.replace('.','',1).isdigit():","    \to3Index = index(tableO3, float(o3), 1)","    \tf = f+1","",""]},{"start":{"row":511,"column":29},"end":{"row":511,"column":30},"action":"remove","lines":["+"]},{"start":{"row":511,"column":29},"end":{"row":511,"column":32},"action":"insert","lines":[" + "]},{"start":{"row":511,"column":41},"end":{"row":511,"column":42},"action":"remove","lines":["+"]},{"start":{"row":511,"column":41},"end":{"row":511,"column":66},"action":"insert","lines":[" + pm25Index + o3Index + "]},{"start":{"row":622,"column":0},"end":{"row":624,"column":0},"action":"insert","lines":["        pm25=self.request.get('pm25')","        o3=self.request.get('o3')",""]},{"start":{"row":631,"column":43},"end":{"row":631,"column":63},"action":"insert","lines":["pm25\":pm25,\"o3\":o3,\""]},{"start":{"row":646,"column":0},"end":{"row":656,"column":0},"action":"insert","lines":["            if not pm25.replace('.','',1).isdigit():","                pm25 = None","            else:","                pm25 = float(pm25)","","            if not o3.replace('.','',1).isdigit():","                o3 = None","            else:","                o3 = float(o3)","",""]},{"start":{"row":680,"column":0},"end":{"row":682,"column":0},"action":"insert","lines":["                pm25=pm25,","                o3=o3,",""]},{"start":{"row":761,"column":32},"end":{"row":761,"column":34},"action":"insert","lines":["es"]},{"start":{"row":765,"column":0},"end":{"row":767,"column":0},"action":"insert","lines":["            zd.pm25=pm25","            zd.o3=o3",""]},{"start":{"row":803,"column":11},"end":{"row":803,"column":29},"action":"remove","lines":["tester', UrlTester"]},{"start":{"row":803,"column":11},"end":{"row":804,"column":32},"action":"insert","lines":["bot', Bot),","        ('/linkoping', Linkoping"]}],[{"start":{"row":693,"column":0},"end":{"row":693,"column":4},"action":"insert","lines":["    "],"id":207}],[{"start":{"row":693,"column":4},"end":{"row":693,"column":8},"action":"insert","lines":["    "],"id":208}],[{"start":{"row":693,"column":8},"end":{"row":693,"column":12},"action":"insert","lines":["    "],"id":209}],[{"start":{"row":60,"column":11},"end":{"row":61,"column":0},"action":"insert","lines":["",""],"id":210}],[{"start":{"row":61,"column":0},"end":{"row":65,"column":0},"action":"insert","lines":["from httplib2 import Http","","from oauth2client.service_account import ServiceAccountCredentials","from apiclient.discovery import build",""],"id":211}],[{"start":{"row":62,"column":0},"end":{"row":63,"column":0},"action":"remove","lines":["",""],"id":212}],[{"start":{"row":698,"column":21},"end":{"row":699,"column":0},"action":"insert","lines":["",""],"id":213},{"start":{"row":699,"column":0},"end":{"row":699,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":699,"column":12},"end":{"row":700,"column":0},"action":"insert","lines":["",""],"id":214},{"start":{"row":700,"column":0},"end":{"row":700,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":700,"column":0},"end":{"row":703,"column":199},"action":"insert","lines":["scopes = ['https://www.googleapis.com/auth/fusiontables']","credentials = ServiceAccountCredentials.from_json_keyfile_name('airupBackend-b120f4cbc1a7.json', scopes)","fusiontablesadmin = build('fusiontables', 'v2', credentials=credentials)","print(fusiontablesadmin.query().sql(sql=\"INSERT INTO 1VQ8VQZwKY7zjrTqAxQTtlYdt18bjsbU7Gx4_nyK7 ('Source ID','index','Date','Pos') VALUES ('ZZZ', 22, '2015-01-13', '53.592354,10.053774') \").execute())"],"id":215}],[{"start":{"row":700,"column":0},"end":{"row":700,"column":4},"action":"insert","lines":["    "],"id":216}],[{"start":{"row":700,"column":4},"end":{"row":700,"column":8},"action":"insert","lines":["    "],"id":217}],[{"start":{"row":700,"column":8},"end":{"row":700,"column":12},"action":"insert","lines":["    "],"id":218}],[{"start":{"row":701,"column":0},"end":{"row":701,"column":4},"action":"insert","lines":["    "],"id":219}],[{"start":{"row":701,"column":4},"end":{"row":701,"column":8},"action":"insert","lines":["    "],"id":220}],[{"start":{"row":701,"column":8},"end":{"row":701,"column":12},"action":"insert","lines":["    "],"id":221}],[{"start":{"row":702,"column":0},"end":{"row":702,"column":4},"action":"insert","lines":["    "],"id":222}],[{"start":{"row":702,"column":4},"end":{"row":702,"column":8},"action":"insert","lines":["    "],"id":223}],[{"start":{"row":702,"column":8},"end":{"row":702,"column":12},"action":"insert","lines":["    "],"id":224}],[{"start":{"row":703,"column":0},"end":{"row":703,"column":6},"action":"remove","lines":["print("],"id":225}],[{"start":{"row":703,"column":0},"end":{"row":703,"column":4},"action":"insert","lines":["    "],"id":226}],[{"start":{"row":703,"column":4},"end":{"row":703,"column":8},"action":"insert","lines":["    "],"id":227}],[{"start":{"row":703,"column":8},"end":{"row":703,"column":12},"action":"insert","lines":["    "],"id":228}],[{"start":{"row":703,"column":216},"end":{"row":703,"column":217},"action":"remove","lines":[" "],"id":229}],[{"start":{"row":703,"column":212},"end":{"row":703,"column":216},"action":"remove","lines":["    "],"id":230}],[{"start":{"row":703,"column":208},"end":{"row":703,"column":212},"action":"remove","lines":["    "],"id":231}],[{"start":{"row":703,"column":207},"end":{"row":703,"column":208},"action":"remove","lines":[" "],"id":232}],[{"start":{"row":703,"column":206},"end":{"row":703,"column":207},"action":"remove","lines":[" "],"id":233}],[{"start":{"row":703,"column":205},"end":{"row":703,"column":206},"action":"remove","lines":[" "],"id":234}],[{"start":{"row":703,"column":204},"end":{"row":703,"column":205},"action":"remove","lines":[")"],"id":235}],[{"start":{"row":703,"column":145},"end":{"row":703,"column":148},"action":"remove","lines":["ZZZ"],"id":236},{"start":{"row":703,"column":145},"end":{"row":703,"column":146},"action":"insert","lines":["\""]}],[{"start":{"row":703,"column":146},"end":{"row":703,"column":147},"action":"insert","lines":["\""],"id":237}],[{"start":{"row":703,"column":146},"end":{"row":703,"column":147},"action":"insert","lines":[" "],"id":238}],[{"start":{"row":703,"column":147},"end":{"row":703,"column":148},"action":"insert","lines":["+"],"id":239}],[{"start":{"row":703,"column":148},"end":{"row":703,"column":149},"action":"insert","lines":[" "],"id":240}],[{"start":{"row":703,"column":149},"end":{"row":703,"column":177},"action":"insert","lines":["self.request.get('sourceId')"],"id":241}],[{"start":{"row":703,"column":177},"end":{"row":703,"column":178},"action":"insert","lines":[" "],"id":242}],[{"start":{"row":703,"column":178},"end":{"row":703,"column":179},"action":"insert","lines":["+"],"id":243}],[{"start":{"row":703,"column":179},"end":{"row":703,"column":180},"action":"insert","lines":[" "],"id":244}],[{"start":{"row":703,"column":184},"end":{"row":703,"column":186},"action":"remove","lines":["22"],"id":245},{"start":{"row":703,"column":184},"end":{"row":703,"column":185},"action":"insert","lines":["\""]}],[{"start":{"row":703,"column":185},"end":{"row":703,"column":186},"action":"insert","lines":["\""],"id":246}],[{"start":{"row":703,"column":185},"end":{"row":703,"column":186},"action":"insert","lines":[" "],"id":247}],[{"start":{"row":703,"column":186},"end":{"row":703,"column":187},"action":"insert","lines":["+"],"id":248}],[{"start":{"row":703,"column":187},"end":{"row":703,"column":188},"action":"insert","lines":[" "],"id":249}],[{"start":{"row":703,"column":188},"end":{"row":703,"column":196},"action":"insert","lines":["aqiValue"],"id":250}],[{"start":{"row":703,"column":196},"end":{"row":703,"column":197},"action":"insert","lines":[" "],"id":251}],[{"start":{"row":703,"column":197},"end":{"row":703,"column":198},"action":"insert","lines":["+"],"id":252}],[{"start":{"row":703,"column":198},"end":{"row":703,"column":199},"action":"insert","lines":[" "],"id":253}],[{"start":{"row":703,"column":203},"end":{"row":703,"column":213},"action":"remove","lines":["2015-01-13"],"id":254},{"start":{"row":703,"column":203},"end":{"row":703,"column":204},"action":"insert","lines":["\""]}],[{"start":{"row":703,"column":204},"end":{"row":703,"column":205},"action":"insert","lines":["\""],"id":255}],[{"start":{"row":703,"column":204},"end":{"row":703,"column":205},"action":"insert","lines":[" "],"id":256}],[{"start":{"row":703,"column":205},"end":{"row":703,"column":206},"action":"insert","lines":["+"],"id":257}],[{"start":{"row":703,"column":206},"end":{"row":703,"column":207},"action":"insert","lines":[" "],"id":258}],[{"start":{"row":703,"column":207},"end":{"row":703,"column":256},"action":"insert","lines":["datetime.datetime.fromtimestamp(float(timestamp))"],"id":259}],[{"start":{"row":703,"column":256},"end":{"row":703,"column":257},"action":"insert","lines":[" "],"id":260}],[{"start":{"row":703,"column":257},"end":{"row":703,"column":258},"action":"insert","lines":["+"],"id":261}],[{"start":{"row":703,"column":258},"end":{"row":703,"column":259},"action":"insert","lines":[" "],"id":262}],[{"start":{"row":703,"column":282},"end":{"row":703,"column":283},"action":"remove","lines":["4"],"id":263}],[{"start":{"row":703,"column":281},"end":{"row":703,"column":282},"action":"remove","lines":["7"],"id":264}],[{"start":{"row":703,"column":280},"end":{"row":703,"column":281},"action":"remove","lines":["7"],"id":265}],[{"start":{"row":703,"column":279},"end":{"row":703,"column":280},"action":"remove","lines":["3"],"id":266}],[{"start":{"row":703,"column":278},"end":{"row":703,"column":279},"action":"remove","lines":["5"],"id":267}],[{"start":{"row":703,"column":277},"end":{"row":703,"column":278},"action":"remove","lines":["0"],"id":268}],[{"start":{"row":703,"column":276},"end":{"row":703,"column":277},"action":"remove","lines":["."],"id":269}],[{"start":{"row":703,"column":275},"end":{"row":703,"column":276},"action":"remove","lines":["0"],"id":270}],[{"start":{"row":703,"column":274},"end":{"row":703,"column":275},"action":"remove","lines":["1"],"id":271}],[{"start":{"row":703,"column":273},"end":{"row":703,"column":274},"action":"remove","lines":[","],"id":272}],[{"start":{"row":703,"column":272},"end":{"row":703,"column":273},"action":"remove","lines":["4"],"id":273}],[{"start":{"row":703,"column":271},"end":{"row":703,"column":272},"action":"remove","lines":["5"],"id":274}],[{"start":{"row":703,"column":270},"end":{"row":703,"column":271},"action":"remove","lines":["3"],"id":275}],[{"start":{"row":703,"column":269},"end":{"row":703,"column":270},"action":"remove","lines":["2"],"id":276}],[{"start":{"row":703,"column":268},"end":{"row":703,"column":269},"action":"remove","lines":["9"],"id":277}],[{"start":{"row":703,"column":267},"end":{"row":703,"column":268},"action":"remove","lines":["5"],"id":278}],[{"start":{"row":703,"column":266},"end":{"row":703,"column":267},"action":"remove","lines":["."],"id":279}],[{"start":{"row":703,"column":265},"end":{"row":703,"column":266},"action":"remove","lines":["3"],"id":280}],[{"start":{"row":703,"column":264},"end":{"row":703,"column":265},"action":"remove","lines":["5"],"id":281}],[{"start":{"row":703,"column":263},"end":{"row":703,"column":264},"action":"remove","lines":["'"],"id":282}],[{"start":{"row":703,"column":263},"end":{"row":703,"column":264},"action":"insert","lines":["'"],"id":283}],[{"start":{"row":703,"column":264},"end":{"row":703,"column":265},"action":"insert","lines":["\""],"id":284}],[{"start":{"row":703,"column":265},"end":{"row":703,"column":266},"action":"insert","lines":["\""],"id":285}],[{"start":{"row":703,"column":265},"end":{"row":703,"column":266},"action":"insert","lines":[" "],"id":286}],[{"start":{"row":703,"column":266},"end":{"row":703,"column":267},"action":"insert","lines":["+"],"id":287}],[{"start":{"row":703,"column":267},"end":{"row":703,"column":268},"action":"insert","lines":[" "],"id":288}],[{"start":{"row":703,"column":268},"end":{"row":703,"column":296},"action":"insert","lines":["self.request.get('position')"],"id":289}],[{"start":{"row":703,"column":296},"end":{"row":703,"column":297},"action":"insert","lines":[" "],"id":290}],[{"start":{"row":703,"column":297},"end":{"row":703,"column":298},"action":"insert","lines":["+"],"id":291}],[{"start":{"row":703,"column":298},"end":{"row":703,"column":299},"action":"insert","lines":[" "],"id":292}],[{"start":{"row":701,"column":12},"end":{"row":701,"column":13},"action":"insert","lines":["#"],"id":293}],[{"start":{"row":702,"column":12},"end":{"row":702,"column":13},"action":"insert","lines":["#"],"id":294}],[{"start":{"row":703,"column":12},"end":{"row":703,"column":13},"action":"insert","lines":["#"],"id":295}],[{"start":{"row":700,"column":12},"end":{"row":700,"column":13},"action":"insert","lines":["#"],"id":296}]]},"ace":{"folds":[],"scrolltop":2330.5,"scrollleft":0,"selection":{"start":{"row":187,"column":16},"end":{"row":187,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":116,"state":"start","mode":"ace/mode/python"}},"timestamp":1459257956000,"hash":"ac03a1da29f348860e7609ef6859e4baa2f39870"}